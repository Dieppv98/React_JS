{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\@dashboard\\\\user\\\\account\\\\AccountGeneral.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useCallback } from 'react'; // form\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // @mui\n\nimport { Box, Grid, Card, Stack, Typography } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // hooks\n\nimport useAuth from '../../../../hooks/useAuth'; // utils\n\nimport { fData } from '../../../../utils/formatNumber'; // _mock\n\nimport { countries } from '../../../../_mock'; // components\n\nimport { FormProvider, RHFSwitch, RHFSelect, RHFTextField, RHFUploadAvatar } from '../../../../components/hook-form'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AccountGeneral() {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const {\n    user\n  } = useAuth();\n  const UpdateUserSchema = Yup.object().shape({\n    displayName: Yup.string().required('Name is required')\n  });\n  const defaultValues = {\n    displayName: (user === null || user === void 0 ? void 0 : user.displayName) || '',\n    email: (user === null || user === void 0 ? void 0 : user.email) || '',\n    photoURL: (user === null || user === void 0 ? void 0 : user.photoURL) || '',\n    phoneNumber: (user === null || user === void 0 ? void 0 : user.phoneNumber) || '',\n    country: (user === null || user === void 0 ? void 0 : user.country) || '',\n    address: (user === null || user === void 0 ? void 0 : user.address) || '',\n    state: (user === null || user === void 0 ? void 0 : user.state) || '',\n    city: (user === null || user === void 0 ? void 0 : user.city) || '',\n    zipCode: (user === null || user === void 0 ? void 0 : user.zipCode) || '',\n    about: (user === null || user === void 0 ? void 0 : user.about) || '',\n    isPublic: (user === null || user === void 0 ? void 0 : user.isPublic) || ''\n  };\n  const methods = useForm({\n    resolver: yupResolver(UpdateUserSchema),\n    defaultValues\n  });\n  const {\n    setValue,\n    handleSubmit,\n    formState: {\n      isSubmitting\n    }\n  } = methods;\n\n  const onSubmit = async () => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      enqueueSnackbar('Update success!');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleDrop = useCallback(acceptedFiles => {\n    const file = acceptedFiles[0];\n\n    if (file) {\n      setValue('photoURL', Object.assign(file, {\n        preview: URL.createObjectURL(file)\n      }));\n    }\n  }, [setValue]);\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    methods: methods,\n    onSubmit: handleSubmit(onSubmit),\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            py: 10,\n            px: 3,\n            textAlign: 'center'\n          },\n          children: [/*#__PURE__*/_jsxDEV(RHFUploadAvatar, {\n            name: \"photoURL\",\n            accept: \"image/*\",\n            maxSize: 3145728,\n            onDrop: handleDrop,\n            helperText: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"caption\",\n              sx: {\n                mt: 2,\n                mx: 'auto',\n                display: 'block',\n                textAlign: 'center',\n                color: 'text.secondary'\n              },\n              children: [\"Allowed *.jpeg, *.jpg, *.png, *.gif\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this), \" max size of \", fData(3145728)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RHFSwitch, {\n            name: \"isPublic\",\n            labelPlacement: \"start\",\n            label: \"Public Profile\",\n            sx: {\n              mt: 5\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        md: 8,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          sx: {\n            p: 3\n          },\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'grid',\n              rowGap: 3,\n              columnGap: 2,\n              gridTemplateColumns: {\n                xs: 'repeat(1, 1fr)',\n                sm: 'repeat(2, 1fr)'\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"displayName\",\n              label: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"email\",\n              label: \"Email Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"phoneNumber\",\n              label: \"Phone Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"address\",\n              label: \"Address\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFSelect, {\n              name: \"country\",\n              label: \"Country\",\n              placeholder: \"Country\",\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 17\n              }, this), countries.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: option.label,\n                children: option.label\n              }, option.code, false, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"state\",\n              label: \"State/Region\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"city\",\n              label: \"City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"zipCode\",\n              label: \"Zip/Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            spacing: 3,\n            alignItems: \"flex-end\",\n            sx: {\n              mt: 3\n            },\n            children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"about\",\n              multiline: true,\n              rows: 4,\n              label: \"About\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n              type: \"submit\",\n              variant: \"contained\",\n              loading: isSubmitting,\n              children: \"Save Changes\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountGeneral, \"+UISm7AGbKZR0QaZ60HqE/3PrK0=\", false, function () {\n  return [useSnackbar, useAuth, useForm];\n});\n\n_c = AccountGeneral;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountGeneral\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/@dashboard/user/account/AccountGeneral.js"],"names":["Yup","useSnackbar","useCallback","useForm","yupResolver","Box","Grid","Card","Stack","Typography","LoadingButton","useAuth","fData","countries","FormProvider","RHFSwitch","RHFSelect","RHFTextField","RHFUploadAvatar","AccountGeneral","enqueueSnackbar","user","UpdateUserSchema","object","shape","displayName","string","required","defaultValues","email","photoURL","phoneNumber","country","address","state","city","zipCode","about","isPublic","methods","resolver","setValue","handleSubmit","formState","isSubmitting","onSubmit","Promise","resolve","setTimeout","error","console","handleDrop","acceptedFiles","file","Object","assign","preview","URL","createObjectURL","py","px","textAlign","mt","mx","display","color","p","rowGap","columnGap","gridTemplateColumns","xs","sm","map","option","label","code"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useCallback } from 'react';\r\n// form\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { Box, Grid, Card, Stack, Typography } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// hooks\r\nimport useAuth from '../../../../hooks/useAuth';\r\n// utils\r\nimport { fData } from '../../../../utils/formatNumber';\r\n// _mock\r\nimport { countries } from '../../../../_mock';\r\n// components\r\nimport { FormProvider, RHFSwitch, RHFSelect, RHFTextField, RHFUploadAvatar } from '../../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountGeneral() {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const { user } = useAuth();\r\n\r\n  const UpdateUserSchema = Yup.object().shape({\r\n    displayName: Yup.string().required('Name is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    displayName: user?.displayName || '',\r\n    email: user?.email || '',\r\n    photoURL: user?.photoURL || '',\r\n    phoneNumber: user?.phoneNumber || '',\r\n    country: user?.country || '',\r\n    address: user?.address || '',\r\n    state: user?.state || '',\r\n    city: user?.city || '',\r\n    zipCode: user?.zipCode || '',\r\n    about: user?.about || '',\r\n    isPublic: user?.isPublic || '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(UpdateUserSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n      enqueueSnackbar('Update success!');\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleDrop = useCallback(\r\n    (acceptedFiles) => {\r\n      const file = acceptedFiles[0];\r\n\r\n      if (file) {\r\n        setValue(\r\n          'photoURL',\r\n          Object.assign(file, {\r\n            preview: URL.createObjectURL(file),\r\n          })\r\n        );\r\n      }\r\n    },\r\n    [setValue]\r\n  );\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Grid container spacing={3}>\r\n        <Grid item xs={12} md={4}>\r\n          <Card sx={{ py: 10, px: 3, textAlign: 'center' }}>\r\n            <RHFUploadAvatar\r\n              name=\"photoURL\"\r\n              accept=\"image/*\"\r\n              maxSize={3145728}\r\n              onDrop={handleDrop}\r\n              helperText={\r\n                <Typography\r\n                  variant=\"caption\"\r\n                  sx={{\r\n                    mt: 2,\r\n                    mx: 'auto',\r\n                    display: 'block',\r\n                    textAlign: 'center',\r\n                    color: 'text.secondary',\r\n                  }}\r\n                >\r\n                  Allowed *.jpeg, *.jpg, *.png, *.gif\r\n                  <br /> max size of {fData(3145728)}\r\n                </Typography>\r\n              }\r\n            />\r\n\r\n            <RHFSwitch name=\"isPublic\" labelPlacement=\"start\" label=\"Public Profile\" sx={{ mt: 5 }} />\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={8}>\r\n          <Card sx={{ p: 3 }}>\r\n            <Box\r\n              sx={{\r\n                display: 'grid',\r\n                rowGap: 3,\r\n                columnGap: 2,\r\n                gridTemplateColumns: { xs: 'repeat(1, 1fr)', sm: 'repeat(2, 1fr)' },\r\n              }}\r\n            >\r\n              <RHFTextField name=\"displayName\" label=\"Name\" />\r\n              <RHFTextField name=\"email\" label=\"Email Address\" />\r\n\r\n              <RHFTextField name=\"phoneNumber\" label=\"Phone Number\" />\r\n              <RHFTextField name=\"address\" label=\"Address\" />\r\n\r\n              <RHFSelect name=\"country\" label=\"Country\" placeholder=\"Country\">\r\n                <option value=\"\" />\r\n                {countries.map((option) => (\r\n                  <option key={option.code} value={option.label}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </RHFSelect>\r\n\r\n              <RHFTextField name=\"state\" label=\"State/Region\" />\r\n\r\n              <RHFTextField name=\"city\" label=\"City\" />\r\n              <RHFTextField name=\"zipCode\" label=\"Zip/Code\" />\r\n            </Box>\r\n\r\n            <Stack spacing={3} alignItems=\"flex-end\" sx={{ mt: 3 }}>\r\n              <RHFTextField name=\"about\" multiline rows={4} label=\"About\" />\r\n\r\n              <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n                Save Changes\r\n              </LoadingButton>\r\n            </Stack>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </FormProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}