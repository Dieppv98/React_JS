{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\components\\\\color-utils\\\\ColorPreview.js\";\nimport PropTypes from 'prop-types'; // @mui\n\nimport { alpha, styled } from '@mui/material/styles';\nimport { Box, Typography } from '@mui/material'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled(Box)(() => ({\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'flex-end'\n}));\nconst IconStyle = styled('div')(_ref => {\n  let {\n    theme\n  } = _ref;\n  return {\n    marginLeft: -4,\n    borderRadius: '50%',\n    width: theme.spacing(2),\n    height: theme.spacing(2),\n    border: `solid 2px ${theme.palette.background.paper}`,\n    boxShadow: `inset -1px 1px 2px ${alpha(theme.palette.common.black, 0.24)}`\n  };\n}); // ----------------------------------------------------------------------\n\nColorPreview.propTypes = {\n  colors: PropTypes.arrayOf(PropTypes.string),\n  limit: PropTypes.number,\n  sx: PropTypes.object\n};\nexport default function ColorPreview(_ref2) {\n  let {\n    colors,\n    limit = 3,\n    sx\n  } = _ref2;\n  const showColor = colors.slice(0, limit);\n  const moreColor = colors.length - limit;\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    component: \"span\",\n    sx: sx,\n    children: [showColor.map((color, index) => /*#__PURE__*/_jsxDEV(IconStyle, {\n      sx: {\n        bgcolor: color\n      }\n    }, color + index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)), colors.length > limit && /*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"subtitle2\",\n      children: `+${moreColor}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_c = ColorPreview;\n\nvar _c;\n\n$RefreshReg$(_c, \"ColorPreview\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/components/color-utils/ColorPreview.js"],"names":["PropTypes","alpha","styled","Box","Typography","RootStyle","display","alignItems","justifyContent","IconStyle","theme","marginLeft","borderRadius","width","spacing","height","border","palette","background","paper","boxShadow","common","black","ColorPreview","propTypes","colors","arrayOf","string","limit","number","sx","object","showColor","slice","moreColor","length","map","color","index","bgcolor"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,sBAA9B;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,eAAhC,C,CAEA;;;AAEA,MAAMC,SAAS,GAAGH,MAAM,CAACC,GAAD,CAAN,CAAY,OAAO;AACnCG,EAAAA,OAAO,EAAE,MAD0B;AAEnCC,EAAAA,UAAU,EAAE,QAFuB;AAGnCC,EAAAA,cAAc,EAAE;AAHmB,CAAP,CAAZ,CAAlB;AAMA,MAAMC,SAAS,GAAGP,MAAM,CAAC,KAAD,CAAN,CAAc;AAAA,MAAC;AAAEQ,IAAAA;AAAF,GAAD;AAAA,SAAgB;AAC9CC,IAAAA,UAAU,EAAE,CAAC,CADiC;AAE9CC,IAAAA,YAAY,EAAE,KAFgC;AAG9CC,IAAAA,KAAK,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CAHuC;AAI9CC,IAAAA,MAAM,EAAEL,KAAK,CAACI,OAAN,CAAc,CAAd,CAJsC;AAK9CE,IAAAA,MAAM,EAAG,aAAYN,KAAK,CAACO,OAAN,CAAcC,UAAd,CAAyBC,KAAM,EALN;AAM9CC,IAAAA,SAAS,EAAG,sBAAqBnB,KAAK,CAACS,KAAK,CAACO,OAAN,CAAcI,MAAd,CAAqBC,KAAtB,EAA6B,IAA7B,CAAmC;AAN3B,GAAhB;AAAA,CAAd,CAAlB,C,CASA;;AAEAC,YAAY,CAACC,SAAb,GAAyB;AACvBC,EAAAA,MAAM,EAAEzB,SAAS,CAAC0B,OAAV,CAAkB1B,SAAS,CAAC2B,MAA5B,CADe;AAEvBC,EAAAA,KAAK,EAAE5B,SAAS,CAAC6B,MAFM;AAGvBC,EAAAA,EAAE,EAAE9B,SAAS,CAAC+B;AAHS,CAAzB;AAMA,eAAe,SAASR,YAAT,QAAiD;AAAA,MAA3B;AAAEE,IAAAA,MAAF;AAAUG,IAAAA,KAAK,GAAG,CAAlB;AAAqBE,IAAAA;AAArB,GAA2B;AAC9D,QAAME,SAAS,GAAGP,MAAM,CAACQ,KAAP,CAAa,CAAb,EAAgBL,KAAhB,CAAlB;AACA,QAAMM,SAAS,GAAGT,MAAM,CAACU,MAAP,GAAgBP,KAAlC;AAEA,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,MAArB;AAA4B,IAAA,EAAE,EAAEE,EAAhC;AAAA,eACGE,SAAS,CAACI,GAAV,CAAc,CAACC,KAAD,EAAQC,KAAR,kBACb,QAAC,SAAD;AAA+B,MAAA,EAAE,EAAE;AAAEC,QAAAA,OAAO,EAAEF;AAAX;AAAnC,OAAgBA,KAAK,GAAGC,KAAxB;AAAA;AAAA;AAAA;AAAA,YADD,CADH,EAKGb,MAAM,CAACU,MAAP,GAAgBP,KAAhB,iBAAyB,QAAC,UAAD;AAAY,MAAA,OAAO,EAAC,WAApB;AAAA,gBAAkC,IAAGM,SAAU;AAA/C;AAAA;AAAA;AAAA;AAAA,YAL5B;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD;KAbuBX,Y","sourcesContent":["import PropTypes from 'prop-types';\r\n// @mui\r\nimport { alpha, styled } from '@mui/material/styles';\r\nimport { Box, Typography } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled(Box)(() => ({\r\n  display: 'flex',\r\n  alignItems: 'center',\r\n  justifyContent: 'flex-end',\r\n}));\r\n\r\nconst IconStyle = styled('div')(({ theme }) => ({\r\n  marginLeft: -4,\r\n  borderRadius: '50%',\r\n  width: theme.spacing(2),\r\n  height: theme.spacing(2),\r\n  border: `solid 2px ${theme.palette.background.paper}`,\r\n  boxShadow: `inset -1px 1px 2px ${alpha(theme.palette.common.black, 0.24)}`,\r\n}));\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nColorPreview.propTypes = {\r\n  colors: PropTypes.arrayOf(PropTypes.string),\r\n  limit: PropTypes.number,\r\n  sx: PropTypes.object,\r\n};\r\n\r\nexport default function ColorPreview({ colors, limit = 3, sx }) {\r\n  const showColor = colors.slice(0, limit);\r\n  const moreColor = colors.length - limit;\r\n\r\n  return (\r\n    <RootStyle component=\"span\" sx={sx}>\r\n      {showColor.map((color, index) => (\r\n        <IconStyle key={color + index} sx={{ bgcolor: color }} />\r\n      ))}\r\n\r\n      {colors.length > limit && <Typography variant=\"subtitle2\">{`+${moreColor}`}</Typography>}\r\n    </RootStyle>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}