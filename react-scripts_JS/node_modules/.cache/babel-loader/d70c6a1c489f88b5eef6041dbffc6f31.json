{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\@dashboard\\\\user\\\\account\\\\AccountChangePassword.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack'; // form\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form'; // @mui\n\nimport { Stack, Card } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // components\n\nimport { FormProvider, RHFTextField } from '../../../../components/hook-form'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AccountChangePassword() {\n  _s();\n\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const ChangePassWordSchema = Yup.object().shape({\n    oldPassword: Yup.string().required('Old Password is required'),\n    newPassword: Yup.string().min(6, 'Password must be at least 6 characters').required('New Password is required'),\n    confirmNewPassword: Yup.string().oneOf([Yup.ref('newPassword'), null], 'Passwords must match')\n  });\n  const defaultValues = {\n    oldPassword: '',\n    newPassword: '',\n    confirmNewPassword: ''\n  };\n  const methods = useForm({\n    resolver: yupResolver(ChangePassWordSchema),\n    defaultValues\n  });\n  const {\n    reset,\n    handleSubmit,\n    formState: {\n      isSubmitting\n    }\n  } = methods;\n\n  const onSubmit = async () => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      reset();\n      enqueueSnackbar('Update success!');\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Card, {\n    sx: {\n      p: 3\n    },\n    children: /*#__PURE__*/_jsxDEV(FormProvider, {\n      methods: methods,\n      onSubmit: handleSubmit(onSubmit),\n      children: /*#__PURE__*/_jsxDEV(Stack, {\n        spacing: 3,\n        alignItems: \"flex-end\",\n        children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n          name: \"oldPassword\",\n          type: \"password\",\n          label: \"Old Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n          name: \"newPassword\",\n          type: \"password\",\n          label: \"New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n          name: \"confirmNewPassword\",\n          type: \"password\",\n          label: \"Confirm New Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Save Changes\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AccountChangePassword, \"uKOtsBeDySggt9sZchvIq0fi0jA=\", false, function () {\n  return [useSnackbar, useForm];\n});\n\n_c = AccountChangePassword;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountChangePassword\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/@dashboard/user/account/AccountChangePassword.js"],"names":["Yup","useSnackbar","yupResolver","useForm","Stack","Card","LoadingButton","FormProvider","RHFTextField","AccountChangePassword","enqueueSnackbar","ChangePassWordSchema","object","shape","oldPassword","string","required","newPassword","min","confirmNewPassword","oneOf","ref","defaultValues","methods","resolver","reset","handleSubmit","formState","isSubmitting","onSubmit","Promise","resolve","setTimeout","error","console","p"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack';\r\n// form\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\n// @mui\r\nimport { Stack, Card } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// components\r\nimport { FormProvider, RHFTextField } from '../../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function AccountChangePassword() {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const ChangePassWordSchema = Yup.object().shape({\r\n    oldPassword: Yup.string().required('Old Password is required'),\r\n    newPassword: Yup.string().min(6, 'Password must be at least 6 characters').required('New Password is required'),\r\n    confirmNewPassword: Yup.string().oneOf([Yup.ref('newPassword'), null], 'Passwords must match'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    oldPassword: '',\r\n    newPassword: '',\r\n    confirmNewPassword: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ChangePassWordSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async () => {\r\n    try {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n      reset();\r\n      enqueueSnackbar('Update success!');\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card sx={{ p: 3 }}>\r\n      <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n        <Stack spacing={3} alignItems=\"flex-end\">\r\n          <RHFTextField name=\"oldPassword\" type=\"password\" label=\"Old Password\" />\r\n\r\n          <RHFTextField name=\"newPassword\" type=\"password\" label=\"New Password\" />\r\n\r\n          <RHFTextField name=\"confirmNewPassword\" type=\"password\" label=\"Confirm New Password\" />\r\n\r\n          <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n            Save Changes\r\n          </LoadingButton>\r\n        </Stack>\r\n      </FormProvider>\r\n    </Card>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}