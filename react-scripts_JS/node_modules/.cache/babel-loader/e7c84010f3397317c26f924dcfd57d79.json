{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\@dashboard\\\\blog\\\\BlogPostsSearch.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { paramCase } from 'change-case';\nimport parse from 'autosuggest-highlight/parse';\nimport match from 'autosuggest-highlight/match';\nimport { useNavigate } from 'react-router-dom'; // @mui\n\nimport { styled } from '@mui/material/styles';\nimport { Link, Typography, Autocomplete, InputAdornment, Popper } from '@mui/material'; // hooks\n\nimport useIsMountedRef from '../../../hooks/useIsMountedRef'; // utils\n\nimport axios from '../../../utils/axios'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; // components\n\nimport Image from '../../../components/Image';\nimport Iconify from '../../../components/Iconify';\nimport InputStyle from '../../../components/InputStyle';\nimport SearchNotFound from '../../../components/SearchNotFound'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PopperStyle = styled(props => /*#__PURE__*/_jsxDEV(Popper, {\n  placement: \"bottom-start\",\n  ...props\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 23,\n  columnNumber: 39\n}, this))({\n  width: '280px !important'\n}); // ----------------------------------------------------------------------\n\nexport default function BlogPostsSearch() {\n  _s();\n\n  const navigate = useNavigate();\n  const isMountedRef = useIsMountedRef();\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n\n  const handleChangeSearch = async value => {\n    try {\n      setSearchQuery(value);\n\n      if (value) {\n        const response = await axios.get('/api/blog/posts/search', {\n          params: {\n            query: value\n          }\n        });\n\n        if (isMountedRef.current) {\n          setSearchResults(response.data.results);\n        }\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleClick = title => {\n    navigate(`${PATH_DASHBOARD.blog.root}/post/${paramCase(title)}`);\n  };\n\n  const handleKeyUp = event => {\n    if (event.key === 'Enter') {\n      handleClick(searchQuery);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    size: \"small\",\n    autoHighlight: true,\n    popupIcon: null,\n    PopperComponent: PopperStyle,\n    options: searchResults,\n    onInputChange: (event, value) => handleChangeSearch(value),\n    getOptionLabel: post => post.title,\n    noOptionsText: /*#__PURE__*/_jsxDEV(SearchNotFound, {\n      searchQuery: searchQuery\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 22\n    }, this),\n    isOptionEqualToValue: (option, value) => option.id === value.id,\n    renderInput: params => /*#__PURE__*/_jsxDEV(InputStyle, { ...params,\n      stretchStart: 200,\n      placeholder: \"Search post...\",\n      onKeyUp: handleKeyUp,\n      InputProps: { ...params.InputProps,\n        startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n          position: \"start\",\n          children: /*#__PURE__*/_jsxDEV(Iconify, {\n            icon: 'eva:search-fill',\n            sx: {\n              ml: 1,\n              width: 20,\n              height: 20,\n              color: 'text.disabled'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 15\n        }, this)\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this),\n    renderOption: (props, post, _ref) => {\n      let {\n        inputValue\n      } = _ref;\n      const {\n        title,\n        cover\n      } = post;\n      const matches = match(title, inputValue);\n      const parts = parse(title, matches);\n      return /*#__PURE__*/_jsxDEV(\"li\", { ...props,\n        children: [/*#__PURE__*/_jsxDEV(Image, {\n          alt: cover,\n          src: cover,\n          sx: {\n            width: 48,\n            height: 48,\n            borderRadius: 1,\n            flexShrink: 0,\n            mr: 1.5\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          underline: \"none\",\n          onClick: () => handleClick(title),\n          children: parts.map((part, index) => /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            variant: \"subtitle2\",\n            color: part.highlight ? 'primary' : 'textPrimary',\n            children: part.text\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BlogPostsSearch, \"CALbK0DJ559vO59U/adLOWAM6YI=\", false, function () {\n  return [useNavigate, useIsMountedRef];\n});\n\n_c = BlogPostsSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPostsSearch\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/@dashboard/blog/BlogPostsSearch.js"],"names":["useState","paramCase","parse","match","useNavigate","styled","Link","Typography","Autocomplete","InputAdornment","Popper","useIsMountedRef","axios","PATH_DASHBOARD","Image","Iconify","InputStyle","SearchNotFound","PopperStyle","props","width","BlogPostsSearch","navigate","isMountedRef","searchQuery","setSearchQuery","searchResults","setSearchResults","handleChangeSearch","value","response","get","params","query","current","data","results","error","console","handleClick","title","blog","root","handleKeyUp","event","key","post","option","id","InputProps","startAdornment","ml","height","color","inputValue","cover","matches","parts","borderRadius","flexShrink","mr","map","part","index","highlight","text"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,OAAOC,KAAP,MAAkB,6BAAlB;AACA,SAASC,WAAT,QAA4B,kBAA5B,C,CACA;;AACA,SAASC,MAAT,QAAuB,sBAAvB;AACA,SAASC,IAAT,EAAeC,UAAf,EAA2BC,YAA3B,EAAyCC,cAAzC,EAAyDC,MAAzD,QAAuE,eAAvE,C,CACA;;AACA,OAAOC,eAAP,MAA4B,gCAA5B,C,CACA;;AACA,OAAOC,KAAP,MAAkB,sBAAlB,C,CACA;;AACA,SAASC,cAAT,QAA+B,uBAA/B,C,CACA;;AACA,OAAOC,KAAP,MAAkB,2BAAlB;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,OAAOC,UAAP,MAAuB,gCAAvB;AACA,OAAOC,cAAP,MAA2B,oCAA3B,C,CAEA;;;AAEA,MAAMC,WAAW,GAAGb,MAAM,CAAEc,KAAD,iBAAW,QAAC,MAAD;AAAQ,EAAA,SAAS,EAAC,cAAlB;AAAA,KAAqCA;AAArC;AAAA;AAAA;AAAA;AAAA,QAAZ,CAAN,CAAkE;AACpFC,EAAAA,KAAK,EAAE;AAD6E,CAAlE,CAApB,C,CAIA;;AAEA,eAAe,SAASC,eAAT,GAA2B;AAAA;;AACxC,QAAMC,QAAQ,GAAGlB,WAAW,EAA5B;AAEA,QAAMmB,YAAY,GAAGZ,eAAe,EAApC;AAEA,QAAM,CAACa,WAAD,EAAcC,cAAd,IAAgCzB,QAAQ,CAAC,EAAD,CAA9C;AAEA,QAAM,CAAC0B,aAAD,EAAgBC,gBAAhB,IAAoC3B,QAAQ,CAAC,EAAD,CAAlD;;AAEA,QAAM4B,kBAAkB,GAAG,MAAOC,KAAP,IAAiB;AAC1C,QAAI;AACFJ,MAAAA,cAAc,CAACI,KAAD,CAAd;;AACA,UAAIA,KAAJ,EAAW;AACT,cAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,GAAN,CAAU,wBAAV,EAAoC;AACzDC,UAAAA,MAAM,EAAE;AAAEC,YAAAA,KAAK,EAAEJ;AAAT;AADiD,SAApC,CAAvB;;AAIA,YAAIN,YAAY,CAACW,OAAjB,EAA0B;AACxBP,UAAAA,gBAAgB,CAACG,QAAQ,CAACK,IAAT,CAAcC,OAAf,CAAhB;AACD;AACF;AACF,KAXD,CAWE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAfD;;AAiBA,QAAME,WAAW,GAAIC,KAAD,IAAW;AAC7BlB,IAAAA,QAAQ,CAAE,GAAET,cAAc,CAAC4B,IAAf,CAAoBC,IAAK,SAAQzC,SAAS,CAACuC,KAAD,CAAQ,EAAtD,CAAR;AACD,GAFD;;AAIA,QAAMG,WAAW,GAAIC,KAAD,IAAW;AAC7B,QAAIA,KAAK,CAACC,GAAN,KAAc,OAAlB,EAA2B;AACzBN,MAAAA,WAAW,CAACf,WAAD,CAAX;AACD;AACF,GAJD;;AAMA,sBACE,QAAC,YAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,aAAa,MAFf;AAGE,IAAA,SAAS,EAAE,IAHb;AAIE,IAAA,eAAe,EAAEN,WAJnB;AAKE,IAAA,OAAO,EAAEQ,aALX;AAME,IAAA,aAAa,EAAE,CAACkB,KAAD,EAAQf,KAAR,KAAkBD,kBAAkB,CAACC,KAAD,CANrD;AAOE,IAAA,cAAc,EAAGiB,IAAD,IAAUA,IAAI,CAACN,KAPjC;AAQE,IAAA,aAAa,eAAE,QAAC,cAAD;AAAgB,MAAA,WAAW,EAAEhB;AAA7B;AAAA;AAAA;AAAA;AAAA,YARjB;AASE,IAAA,oBAAoB,EAAE,CAACuB,MAAD,EAASlB,KAAT,KAAmBkB,MAAM,CAACC,EAAP,KAAcnB,KAAK,CAACmB,EAT/D;AAUE,IAAA,WAAW,EAAGhB,MAAD,iBACX,QAAC,UAAD,OACMA,MADN;AAEE,MAAA,YAAY,EAAE,GAFhB;AAGE,MAAA,WAAW,EAAC,gBAHd;AAIE,MAAA,OAAO,EAAEW,WAJX;AAKE,MAAA,UAAU,EAAE,EACV,GAAGX,MAAM,CAACiB,UADA;AAEVC,QAAAA,cAAc,eACZ,QAAC,cAAD;AAAgB,UAAA,QAAQ,EAAC,OAAzB;AAAA,iCACE,QAAC,OAAD;AAAS,YAAA,IAAI,EAAE,iBAAf;AAAkC,YAAA,EAAE,EAAE;AAAEC,cAAAA,EAAE,EAAE,CAAN;AAAS/B,cAAAA,KAAK,EAAE,EAAhB;AAAoBgC,cAAAA,MAAM,EAAE,EAA5B;AAAgCC,cAAAA,KAAK,EAAE;AAAvC;AAAtC;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAHQ;AALd;AAAA;AAAA;AAAA;AAAA,YAXJ;AA0BE,IAAA,YAAY,EAAE,CAAClC,KAAD,EAAQ2B,IAAR,WAAiC;AAAA,UAAnB;AAAEQ,QAAAA;AAAF,OAAmB;AAC7C,YAAM;AAAEd,QAAAA,KAAF;AAASe,QAAAA;AAAT,UAAmBT,IAAzB;AACA,YAAMU,OAAO,GAAGrD,KAAK,CAACqC,KAAD,EAAQc,UAAR,CAArB;AACA,YAAMG,KAAK,GAAGvD,KAAK,CAACsC,KAAD,EAAQgB,OAAR,CAAnB;AAEA,0BACE,mBAAQrC,KAAR;AAAA,gCACE,QAAC,KAAD;AAAO,UAAA,GAAG,EAAEoC,KAAZ;AAAmB,UAAA,GAAG,EAAEA,KAAxB;AAA+B,UAAA,EAAE,EAAE;AAAEnC,YAAAA,KAAK,EAAE,EAAT;AAAagC,YAAAA,MAAM,EAAE,EAArB;AAAyBM,YAAAA,YAAY,EAAE,CAAvC;AAA0CC,YAAAA,UAAU,EAAE,CAAtD;AAAyDC,YAAAA,EAAE,EAAE;AAA7D;AAAnC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAM,UAAA,SAAS,EAAC,MAAhB;AAAuB,UAAA,OAAO,EAAE,MAAMrB,WAAW,CAACC,KAAD,CAAjD;AAAA,oBACGiB,KAAK,CAACI,GAAN,CAAU,CAACC,IAAD,EAAOC,KAAP,kBACT,QAAC,UAAD;AAEE,YAAA,SAAS,EAAC,MAFZ;AAGE,YAAA,OAAO,EAAC,WAHV;AAIE,YAAA,KAAK,EAAED,IAAI,CAACE,SAAL,GAAiB,SAAjB,GAA6B,aAJtC;AAAA,sBAMGF,IAAI,CAACG;AANR,aACOF,KADP;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;AAhDH;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD;;GAxFuB1C,e;UACLjB,W,EAEIO,e;;;KAHCU,e","sourcesContent":["import { useState } from 'react';\r\nimport { paramCase } from 'change-case';\r\nimport parse from 'autosuggest-highlight/parse';\r\nimport match from 'autosuggest-highlight/match';\r\nimport { useNavigate } from 'react-router-dom';\r\n// @mui\r\nimport { styled } from '@mui/material/styles';\r\nimport { Link, Typography, Autocomplete, InputAdornment, Popper } from '@mui/material';\r\n// hooks\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n// utils\r\nimport axios from '../../../utils/axios';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n// components\r\nimport Image from '../../../components/Image';\r\nimport Iconify from '../../../components/Iconify';\r\nimport InputStyle from '../../../components/InputStyle';\r\nimport SearchNotFound from '../../../components/SearchNotFound';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst PopperStyle = styled((props) => <Popper placement=\"bottom-start\" {...props} />)({\r\n  width: '280px !important',\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function BlogPostsSearch() {\r\n  const navigate = useNavigate();\r\n\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  const handleChangeSearch = async (value) => {\r\n    try {\r\n      setSearchQuery(value);\r\n      if (value) {\r\n        const response = await axios.get('/api/blog/posts/search', {\r\n          params: { query: value },\r\n        });\r\n\r\n        if (isMountedRef.current) {\r\n          setSearchResults(response.data.results);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleClick = (title) => {\r\n    navigate(`${PATH_DASHBOARD.blog.root}/post/${paramCase(title)}`);\r\n  };\r\n\r\n  const handleKeyUp = (event) => {\r\n    if (event.key === 'Enter') {\r\n      handleClick(searchQuery);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      size=\"small\"\r\n      autoHighlight\r\n      popupIcon={null}\r\n      PopperComponent={PopperStyle}\r\n      options={searchResults}\r\n      onInputChange={(event, value) => handleChangeSearch(value)}\r\n      getOptionLabel={(post) => post.title}\r\n      noOptionsText={<SearchNotFound searchQuery={searchQuery} />}\r\n      isOptionEqualToValue={(option, value) => option.id === value.id}\r\n      renderInput={(params) => (\r\n        <InputStyle\r\n          {...params}\r\n          stretchStart={200}\r\n          placeholder=\"Search post...\"\r\n          onKeyUp={handleKeyUp}\r\n          InputProps={{\r\n            ...params.InputProps,\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <Iconify icon={'eva:search-fill'} sx={{ ml: 1, width: 20, height: 20, color: 'text.disabled' }} />\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      )}\r\n      renderOption={(props, post, { inputValue }) => {\r\n        const { title, cover } = post;\r\n        const matches = match(title, inputValue);\r\n        const parts = parse(title, matches);\r\n\r\n        return (\r\n          <li {...props}>\r\n            <Image alt={cover} src={cover} sx={{ width: 48, height: 48, borderRadius: 1, flexShrink: 0, mr: 1.5 }} />\r\n            <Link underline=\"none\" onClick={() => handleClick(title)}>\r\n              {parts.map((part, index) => (\r\n                <Typography\r\n                  key={index}\r\n                  component=\"span\"\r\n                  variant=\"subtitle2\"\r\n                  color={part.highlight ? 'primary' : 'textPrimary'}\r\n                >\r\n                  {part.text}\r\n                </Typography>\r\n              ))}\r\n            </Link>\r\n          </li>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}