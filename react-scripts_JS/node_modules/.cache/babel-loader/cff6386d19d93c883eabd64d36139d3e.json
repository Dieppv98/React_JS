{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\auth\\\\verify-code\\\\VerifyCodeForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useSnackbar } from 'notistack';\nimport { useNavigate } from 'react-router-dom';\nimport { useEffect } from 'react'; // form\n\nimport { useForm, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // @mui\n\nimport { OutlinedInput, Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // routes\n\nimport { PATH_DASHBOARD } from '../../../routes/paths'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VerifyCodeForm() {\n  _s();\n\n  const navigate = useNavigate();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const VerifyCodeSchema = Yup.object().shape({\n    code1: Yup.string().required('Code is required'),\n    code2: Yup.string().required('Code is required'),\n    code3: Yup.string().required('Code is required'),\n    code4: Yup.string().required('Code is required'),\n    code5: Yup.string().required('Code is required'),\n    code6: Yup.string().required('Code is required')\n  });\n  const defaultValues = {\n    code1: '',\n    code2: '',\n    code3: '',\n    code4: '',\n    code5: '',\n    code6: ''\n  };\n  const {\n    watch,\n    control,\n    setValue,\n    handleSubmit,\n    formState: {\n      isSubmitting,\n      isValid\n    }\n  } = useForm({\n    mode: 'onBlur',\n    resolver: yupResolver(VerifyCodeSchema),\n    defaultValues\n  });\n  const values = watch();\n  useEffect(() => {\n    document.addEventListener('paste', handlePasteClipboard); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSubmit = async data => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n      console.log('code:', Object.values(data).join(''));\n      enqueueSnackbar('Verify success!');\n      navigate(PATH_DASHBOARD.root, {\n        replace: true\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handlePasteClipboard = event => {\n    var _event$clipboardData;\n\n    let data = (event === null || event === void 0 ? void 0 : (_event$clipboardData = event.clipboardData) === null || _event$clipboardData === void 0 ? void 0 : _event$clipboardData.getData('Text')) || '';\n    data = data.split('');\n    [].forEach.call(document.querySelectorAll('#field-code'), (node, index) => {\n      node.value = data[index];\n      const fieldIndex = `code${index + 1}`;\n      setValue(fieldIndex, data[index]);\n    });\n  };\n\n  const handleChangeWithNextField = (event, handleChange) => {\n    const {\n      maxLength,\n      value,\n      name\n    } = event.target;\n    const fieldIndex = name.replace('code', '');\n    const fieldIntIndex = Number(fieldIndex);\n\n    if (value.length >= maxLength) {\n      if (fieldIntIndex < 6) {\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\n\n        if (nextfield !== null) {\n          nextfield.focus();\n        }\n      }\n    }\n\n    handleChange(event);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      spacing: 2,\n      justifyContent: \"center\",\n      children: Object.keys(values).map((name, index) => /*#__PURE__*/_jsxDEV(Controller, {\n        name: `code${index + 1}`,\n        control: control,\n        render: _ref => {\n          let {\n            field\n          } = _ref;\n          return /*#__PURE__*/_jsxDEV(OutlinedInput, { ...field,\n            id: \"field-code\",\n            autoFocus: index === 0,\n            placeholder: \"-\",\n            onChange: event => handleChangeWithNextField(event, field.onChange),\n            inputProps: {\n              maxLength: 1,\n              sx: {\n                p: 0,\n                textAlign: 'center',\n                width: {\n                  xs: 36,\n                  sm: 56\n                },\n                height: {\n                  xs: 36,\n                  sm: 56\n                }\n              }\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this);\n        }\n      }, name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n      fullWidth: true,\n      size: \"large\",\n      type: \"submit\",\n      variant: \"contained\",\n      loading: isSubmitting,\n      disabled: !isValid,\n      sx: {\n        mt: 3\n      },\n      children: \"Verify\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n}\n\n_s(VerifyCodeForm, \"drU1Qia7GHx/i7bRh/7VKZ66gww=\", false, function () {\n  return [useNavigate, useSnackbar, useForm];\n});\n\n_c = VerifyCodeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"VerifyCodeForm\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/auth/verify-code/VerifyCodeForm.js"],"names":["Yup","useSnackbar","useNavigate","useEffect","useForm","Controller","yupResolver","OutlinedInput","Stack","LoadingButton","PATH_DASHBOARD","VerifyCodeForm","navigate","enqueueSnackbar","VerifyCodeSchema","object","shape","code1","string","required","code2","code3","code4","code5","code6","defaultValues","watch","control","setValue","handleSubmit","formState","isSubmitting","isValid","mode","resolver","values","document","addEventListener","handlePasteClipboard","onSubmit","data","Promise","resolve","setTimeout","console","log","Object","join","root","replace","error","event","clipboardData","getData","split","forEach","call","querySelectorAll","node","index","value","fieldIndex","handleChangeWithNextField","handleChange","maxLength","name","target","fieldIntIndex","Number","length","nextfield","querySelector","focus","keys","map","field","onChange","sx","p","textAlign","width","xs","sm","height","mt"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport { useSnackbar } from 'notistack';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n// form\r\nimport { useForm, Controller } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { OutlinedInput, Stack } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../../routes/paths';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function VerifyCodeForm() {\r\n  const navigate = useNavigate();\r\n\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const VerifyCodeSchema = Yup.object().shape({\r\n    code1: Yup.string().required('Code is required'),\r\n    code2: Yup.string().required('Code is required'),\r\n    code3: Yup.string().required('Code is required'),\r\n    code4: Yup.string().required('Code is required'),\r\n    code5: Yup.string().required('Code is required'),\r\n    code6: Yup.string().required('Code is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    code1: '',\r\n    code2: '',\r\n    code3: '',\r\n    code4: '',\r\n    code5: '',\r\n    code6: '',\r\n  };\r\n\r\n  const {\r\n    watch,\r\n    control,\r\n    setValue,\r\n    handleSubmit,\r\n    formState: { isSubmitting, isValid },\r\n  } = useForm({\r\n    mode: 'onBlur',\r\n    resolver: yupResolver(VerifyCodeSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const values = watch();\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('paste', handlePasteClipboard);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n      console.log('code:', Object.values(data).join(''));\r\n\r\n      enqueueSnackbar('Verify success!');\r\n\r\n      navigate(PATH_DASHBOARD.root, { replace: true });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handlePasteClipboard = (event) => {\r\n    let data = event?.clipboardData?.getData('Text') || '';\r\n\r\n    data = data.split('');\r\n\r\n    [].forEach.call(document.querySelectorAll('#field-code'), (node, index) => {\r\n      node.value = data[index];\r\n      const fieldIndex = `code${index + 1}`;\r\n      setValue(fieldIndex, data[index]);\r\n    });\r\n  };\r\n\r\n  const handleChangeWithNextField = (event, handleChange) => {\r\n    const { maxLength, value, name } = event.target;\r\n    const fieldIndex = name.replace('code', '');\r\n\r\n    const fieldIntIndex = Number(fieldIndex);\r\n\r\n    if (value.length >= maxLength) {\r\n      if (fieldIntIndex < 6) {\r\n        const nextfield = document.querySelector(`input[name=code${fieldIntIndex + 1}]`);\r\n\r\n        if (nextfield !== null) {\r\n          nextfield.focus();\r\n        }\r\n      }\r\n    }\r\n\r\n    handleChange(event);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack direction=\"row\" spacing={2} justifyContent=\"center\">\r\n        {Object.keys(values).map((name, index) => (\r\n          <Controller\r\n            key={name}\r\n            name={`code${index + 1}`}\r\n            control={control}\r\n            render={({ field }) => (\r\n              <OutlinedInput\r\n                {...field}\r\n                id=\"field-code\"\r\n                autoFocus={index === 0}\r\n                placeholder=\"-\"\r\n                onChange={(event) => handleChangeWithNextField(event, field.onChange)}\r\n                inputProps={{\r\n                  maxLength: 1,\r\n                  sx: {\r\n                    p: 0,\r\n                    textAlign: 'center',\r\n                    width: { xs: 36, sm: 56 },\r\n                    height: { xs: 36, sm: 56 },\r\n                  },\r\n                }}\r\n              />\r\n            )}\r\n          />\r\n        ))}\r\n      </Stack>\r\n\r\n      <LoadingButton\r\n        fullWidth\r\n        size=\"large\"\r\n        type=\"submit\"\r\n        variant=\"contained\"\r\n        loading={isSubmitting}\r\n        disabled={!isValid}\r\n        sx={{ mt: 3 }}\r\n      >\r\n        Verify\r\n      </LoadingButton>\r\n    </form>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}