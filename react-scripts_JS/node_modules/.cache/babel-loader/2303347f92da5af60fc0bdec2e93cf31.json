{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\pages\\\\dashboard\\\\Calendar.js\",\n    _s = $RefreshSig$();\n\nimport FullCalendar from '@fullcalendar/react'; // => request placed at the top\n\nimport listPlugin from '@fullcalendar/list';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport timelinePlugin from '@fullcalendar/timeline';\nimport interactionPlugin from '@fullcalendar/interaction'; //\n\nimport { useState, useRef, useEffect } from 'react'; // @mui\n\nimport { Card, Button, Container, DialogTitle } from '@mui/material'; // redux\n\nimport { useDispatch, useSelector } from '../../redux/store';\nimport { getEvents, openModal, closeModal, updateEvent, selectEvent, selectRange } from '../../redux/slices/calendar'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // hooks\n\nimport useSettings from '../../hooks/useSettings';\nimport useResponsive from '../../hooks/useResponsive'; // components\n\nimport Page from '../../components/Page';\nimport Iconify from '../../components/Iconify';\nimport { DialogAnimate } from '../../components/animate';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs'; // sections\n\nimport { CalendarForm, CalendarStyle, CalendarToolbar } from '../../sections/@dashboard/calendar'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst selectedEventSelector = state => {\n  const {\n    events,\n    selectedEventId\n  } = state.calendar;\n\n  if (selectedEventId) {\n    return events.find(_event => _event.id === selectedEventId);\n  }\n\n  return null;\n};\n\nexport default function Calendar() {\n  _s();\n\n  const {\n    themeStretch\n  } = useSettings();\n  const dispatch = useDispatch();\n  const isDesktop = useResponsive('up', 'sm');\n  const calendarRef = useRef(null);\n  const [date, setDate] = useState(new Date());\n  const [view, setView] = useState(isDesktop ? 'dayGridMonth' : 'listWeek');\n  const selectedEvent = useSelector(selectedEventSelector);\n  const {\n    events,\n    isOpenModal,\n    selectedRange\n  } = useSelector(state => state.calendar);\n  useEffect(() => {\n    dispatch(getEvents());\n  }, [dispatch]);\n  useEffect(() => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      const newView = isDesktop ? 'dayGridMonth' : 'listWeek';\n      calendarApi.changeView(newView);\n      setView(newView);\n    }\n  }, [isDesktop]);\n\n  const handleClickToday = () => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      calendarApi.today();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleChangeView = newView => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      calendarApi.changeView(newView);\n      setView(newView);\n    }\n  };\n\n  const handleClickDatePrev = () => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      calendarApi.prev();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleClickDateNext = () => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      calendarApi.next();\n      setDate(calendarApi.getDate());\n    }\n  };\n\n  const handleSelectRange = arg => {\n    const calendarEl = calendarRef.current;\n\n    if (calendarEl) {\n      const calendarApi = calendarEl.getApi();\n      calendarApi.unselect();\n    }\n\n    dispatch(selectRange(arg.start, arg.end));\n  };\n\n  const handleSelectEvent = arg => {\n    dispatch(selectEvent(arg.event.id));\n  };\n\n  const handleResizeEvent = async _ref => {\n    let {\n      event\n    } = _ref;\n\n    try {\n      dispatch(updateEvent(event.id, {\n        allDay: event.allDay,\n        start: event.start,\n        end: event.end\n      }));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleDropEvent = async _ref2 => {\n    let {\n      event\n    } = _ref2;\n\n    try {\n      dispatch(updateEvent(event.id, {\n        allDay: event.allDay,\n        start: event.start,\n        end: event.end\n      }));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const handleAddEvent = () => {\n    dispatch(openModal());\n  };\n\n  const handleCloseModal = () => {\n    dispatch(closeModal());\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Calendar\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: themeStretch ? false : 'xl',\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: \"Calendar\",\n        links: [{\n          name: 'Dashboard',\n          href: PATH_DASHBOARD.root\n        }, {\n          name: 'Calendar'\n        }],\n        moreLink: \"https://fullcalendar.io/docs/react\",\n        action: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          startIcon: /*#__PURE__*/_jsxDEV(Iconify, {\n            icon: 'eva:plus-fill',\n            width: 20,\n            height: 20\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 26\n          }, this),\n          onClick: handleAddEvent,\n          children: \"New Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        children: /*#__PURE__*/_jsxDEV(CalendarStyle, {\n          children: [/*#__PURE__*/_jsxDEV(CalendarToolbar, {\n            date: date,\n            view: view,\n            onNextDate: handleClickDateNext,\n            onPrevDate: handleClickDatePrev,\n            onToday: handleClickToday,\n            onChangeView: handleChangeView\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n            weekends: true,\n            editable: true,\n            droppable: true,\n            selectable: true,\n            events: events,\n            ref: calendarRef,\n            rerenderDelay: 10,\n            initialDate: date,\n            initialView: view,\n            dayMaxEventRows: 3,\n            eventDisplay: \"block\",\n            headerToolbar: false,\n            allDayMaintainDuration: true,\n            eventResizableFromStart: true,\n            select: handleSelectRange,\n            eventDrop: handleDropEvent,\n            eventClick: handleSelectEvent,\n            eventResize: handleResizeEvent,\n            height: isDesktop ? 720 : 'auto',\n            plugins: [listPlugin, dayGridPlugin, timelinePlugin, timeGridPlugin, interactionPlugin]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogAnimate, {\n        open: isOpenModal,\n        onClose: handleCloseModal,\n        children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n          children: selectedEvent ? 'Edit Event' : 'Add Event'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CalendarForm, {\n          event: selectedEvent || {},\n          range: selectedRange,\n          onCancel: handleCloseModal\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Calendar, \"OTW8Ixo0rpVEDyir6KXO1LqS96o=\", false, function () {\n  return [useSettings, useDispatch, useResponsive, useSelector, useSelector];\n});\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/pages/dashboard/Calendar.js"],"names":["FullCalendar","listPlugin","dayGridPlugin","timeGridPlugin","timelinePlugin","interactionPlugin","useState","useRef","useEffect","Card","Button","Container","DialogTitle","useDispatch","useSelector","getEvents","openModal","closeModal","updateEvent","selectEvent","selectRange","PATH_DASHBOARD","useSettings","useResponsive","Page","Iconify","DialogAnimate","HeaderBreadcrumbs","CalendarForm","CalendarStyle","CalendarToolbar","selectedEventSelector","state","events","selectedEventId","calendar","find","_event","id","Calendar","themeStretch","dispatch","isDesktop","calendarRef","date","setDate","Date","view","setView","selectedEvent","isOpenModal","selectedRange","calendarEl","current","calendarApi","getApi","newView","changeView","handleClickToday","today","getDate","handleChangeView","handleClickDatePrev","prev","handleClickDateNext","next","handleSelectRange","arg","unselect","start","end","handleSelectEvent","event","handleResizeEvent","allDay","error","console","handleDropEvent","handleAddEvent","handleCloseModal","name","href","root"],"mappings":";;;AAAA,OAAOA,YAAP,MAAyB,qBAAzB,C,CAAgD;;AAChD,OAAOC,UAAP,MAAuB,oBAAvB;AACA,OAAOC,aAAP,MAA0B,uBAA1B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,cAAP,MAA2B,wBAA3B;AACA,OAAOC,iBAAP,MAA8B,2BAA9B,C,CACA;;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C,C,CACA;;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,WAAlC,QAAqD,eAArD,C,CACA;;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,mBAAzC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,UAA/B,EAA2CC,WAA3C,EAAwDC,WAAxD,EAAqEC,WAArE,QAAwF,6BAAxF,C,CACA;;AACA,SAASC,cAAT,QAA+B,oBAA/B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,yBAAxB;AACA,OAAOC,aAAP,MAA0B,2BAA1B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAASC,aAAT,QAA8B,0BAA9B;AACA,OAAOC,iBAAP,MAA8B,oCAA9B,C,CACA;;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,eAAtC,QAA6D,oCAA7D,C,CAEA;;;;AAEA,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;AACvC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAA8BF,KAAK,CAACG,QAA1C;;AACA,MAAID,eAAJ,EAAqB;AACnB,WAAOD,MAAM,CAACG,IAAP,CAAaC,MAAD,IAAYA,MAAM,CAACC,EAAP,KAAcJ,eAAtC,CAAP;AACD;;AACD,SAAO,IAAP;AACD,CAND;;AAQA,eAAe,SAASK,QAAT,GAAoB;AAAA;;AACjC,QAAM;AAAEC,IAAAA;AAAF,MAAmBlB,WAAW,EAApC;AAEA,QAAMmB,QAAQ,GAAG5B,WAAW,EAA5B;AAEA,QAAM6B,SAAS,GAAGnB,aAAa,CAAC,IAAD,EAAO,IAAP,CAA/B;AAEA,QAAMoB,WAAW,GAAGpC,MAAM,CAAC,IAAD,CAA1B;AAEA,QAAM,CAACqC,IAAD,EAAOC,OAAP,IAAkBvC,QAAQ,CAAC,IAAIwC,IAAJ,EAAD,CAAhC;AAEA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB1C,QAAQ,CAACoC,SAAS,GAAG,cAAH,GAAoB,UAA9B,CAAhC;AAEA,QAAMO,aAAa,GAAGnC,WAAW,CAACiB,qBAAD,CAAjC;AAEA,QAAM;AAAEE,IAAAA,MAAF;AAAUiB,IAAAA,WAAV;AAAuBC,IAAAA;AAAvB,MAAyCrC,WAAW,CAAEkB,KAAD,IAAWA,KAAK,CAACG,QAAlB,CAA1D;AAEA3B,EAAAA,SAAS,CAAC,MAAM;AACdiC,IAAAA,QAAQ,CAAC1B,SAAS,EAAV,CAAR;AACD,GAFQ,EAEN,CAAC0B,QAAD,CAFM,CAAT;AAIAjC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4C,UAAU,GAAGT,WAAW,CAACU,OAA/B;;AACA,QAAID,UAAJ,EAAgB;AACd,YAAME,WAAW,GAAGF,UAAU,CAACG,MAAX,EAApB;AACA,YAAMC,OAAO,GAAGd,SAAS,GAAG,cAAH,GAAoB,UAA7C;AACAY,MAAAA,WAAW,CAACG,UAAZ,CAAuBD,OAAvB;AACAR,MAAAA,OAAO,CAACQ,OAAD,CAAP;AACD;AACF,GARQ,EAQN,CAACd,SAAD,CARM,CAAT;;AAUA,QAAMgB,gBAAgB,GAAG,MAAM;AAC7B,UAAMN,UAAU,GAAGT,WAAW,CAACU,OAA/B;;AACA,QAAID,UAAJ,EAAgB;AACd,YAAME,WAAW,GAAGF,UAAU,CAACG,MAAX,EAApB;AACAD,MAAAA,WAAW,CAACK,KAAZ;AACAd,MAAAA,OAAO,CAACS,WAAW,CAACM,OAAZ,EAAD,CAAP;AACD;AACF,GAPD;;AASA,QAAMC,gBAAgB,GAAIL,OAAD,IAAa;AACpC,UAAMJ,UAAU,GAAGT,WAAW,CAACU,OAA/B;;AACA,QAAID,UAAJ,EAAgB;AACd,YAAME,WAAW,GAAGF,UAAU,CAACG,MAAX,EAApB;AACAD,MAAAA,WAAW,CAACG,UAAZ,CAAuBD,OAAvB;AACAR,MAAAA,OAAO,CAACQ,OAAD,CAAP;AACD;AACF,GAPD;;AASA,QAAMM,mBAAmB,GAAG,MAAM;AAChC,UAAMV,UAAU,GAAGT,WAAW,CAACU,OAA/B;;AACA,QAAID,UAAJ,EAAgB;AACd,YAAME,WAAW,GAAGF,UAAU,CAACG,MAAX,EAApB;AACAD,MAAAA,WAAW,CAACS,IAAZ;AACAlB,MAAAA,OAAO,CAACS,WAAW,CAACM,OAAZ,EAAD,CAAP;AACD;AACF,GAPD;;AASA,QAAMI,mBAAmB,GAAG,MAAM;AAChC,UAAMZ,UAAU,GAAGT,WAAW,CAACU,OAA/B;;AACA,QAAID,UAAJ,EAAgB;AACd,YAAME,WAAW,GAAGF,UAAU,CAACG,MAAX,EAApB;AACAD,MAAAA,WAAW,CAACW,IAAZ;AACApB,MAAAA,OAAO,CAACS,WAAW,CAACM,OAAZ,EAAD,CAAP;AACD;AACF,GAPD;;AASA,QAAMM,iBAAiB,GAAIC,GAAD,IAAS;AACjC,UAAMf,UAAU,GAAGT,WAAW,CAACU,OAA/B;;AACA,QAAID,UAAJ,EAAgB;AACd,YAAME,WAAW,GAAGF,UAAU,CAACG,MAAX,EAApB;AACAD,MAAAA,WAAW,CAACc,QAAZ;AACD;;AACD3B,IAAAA,QAAQ,CAACrB,WAAW,CAAC+C,GAAG,CAACE,KAAL,EAAYF,GAAG,CAACG,GAAhB,CAAZ,CAAR;AACD,GAPD;;AASA,QAAMC,iBAAiB,GAAIJ,GAAD,IAAS;AACjC1B,IAAAA,QAAQ,CAACtB,WAAW,CAACgD,GAAG,CAACK,KAAJ,CAAUlC,EAAX,CAAZ,CAAR;AACD,GAFD;;AAIA,QAAMmC,iBAAiB,GAAG,cAAqB;AAAA,QAAd;AAAED,MAAAA;AAAF,KAAc;;AAC7C,QAAI;AACF/B,MAAAA,QAAQ,CACNvB,WAAW,CAACsD,KAAK,CAAClC,EAAP,EAAW;AACpBoC,QAAAA,MAAM,EAAEF,KAAK,CAACE,MADM;AAEpBL,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAFO;AAGpBC,QAAAA,GAAG,EAAEE,KAAK,CAACF;AAHS,OAAX,CADL,CAAR;AAOD,KARD,CAQE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAZD;;AAcA,QAAME,eAAe,GAAG,eAAqB;AAAA,QAAd;AAAEL,MAAAA;AAAF,KAAc;;AAC3C,QAAI;AACF/B,MAAAA,QAAQ,CACNvB,WAAW,CAACsD,KAAK,CAAClC,EAAP,EAAW;AACpBoC,QAAAA,MAAM,EAAEF,KAAK,CAACE,MADM;AAEpBL,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAFO;AAGpBC,QAAAA,GAAG,EAAEE,KAAK,CAACF;AAHS,OAAX,CADL,CAAR;AAOD,KARD,CAQE,OAAOK,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAZD;;AAcA,QAAMG,cAAc,GAAG,MAAM;AAC3BrC,IAAAA,QAAQ,CAACzB,SAAS,EAAV,CAAR;AACD,GAFD;;AAIA,QAAM+D,gBAAgB,GAAG,MAAM;AAC7BtC,IAAAA,QAAQ,CAACxB,UAAU,EAAX,CAAR;AACD,GAFD;;AAIA,sBACE,QAAC,IAAD;AAAM,IAAA,KAAK,EAAC,UAAZ;AAAA,2BACE,QAAC,SAAD;AAAW,MAAA,QAAQ,EAAEuB,YAAY,GAAG,KAAH,GAAW,IAA5C;AAAA,8BACE,QAAC,iBAAD;AACE,QAAA,OAAO,EAAC,UADV;AAEE,QAAA,KAAK,EAAE,CAAC;AAAEwC,UAAAA,IAAI,EAAE,WAAR;AAAqBC,UAAAA,IAAI,EAAE5D,cAAc,CAAC6D;AAA1C,SAAD,EAAmD;AAAEF,UAAAA,IAAI,EAAE;AAAR,SAAnD,CAFT;AAGE,QAAA,QAAQ,EAAC,oCAHX;AAIE,QAAA,MAAM,eACJ,QAAC,MAAD;AACE,UAAA,OAAO,EAAC,WADV;AAEE,UAAA,SAAS,eAAE,QAAC,OAAD;AAAS,YAAA,IAAI,EAAE,eAAf;AAAgC,YAAA,KAAK,EAAE,EAAvC;AAA2C,YAAA,MAAM,EAAE;AAAnD;AAAA;AAAA;AAAA;AAAA,kBAFb;AAGE,UAAA,OAAO,EAAEF,cAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ;AAAA;AAAA;AAAA;AAAA,cADF,eAgBE,QAAC,IAAD;AAAA,+BACE,QAAC,aAAD;AAAA,kCACE,QAAC,eAAD;AACE,YAAA,IAAI,EAAElC,IADR;AAEE,YAAA,IAAI,EAAEG,IAFR;AAGE,YAAA,UAAU,EAAEiB,mBAHd;AAIE,YAAA,UAAU,EAAEF,mBAJd;AAKE,YAAA,OAAO,EAAEJ,gBALX;AAME,YAAA,YAAY,EAAEG;AANhB;AAAA;AAAA;AAAA;AAAA,kBADF,eASE,QAAC,YAAD;AACE,YAAA,QAAQ,MADV;AAEE,YAAA,QAAQ,MAFV;AAGE,YAAA,SAAS,MAHX;AAIE,YAAA,UAAU,MAJZ;AAKE,YAAA,MAAM,EAAE5B,MALV;AAME,YAAA,GAAG,EAAEU,WANP;AAOE,YAAA,aAAa,EAAE,EAPjB;AAQE,YAAA,WAAW,EAAEC,IARf;AASE,YAAA,WAAW,EAAEG,IATf;AAUE,YAAA,eAAe,EAAE,CAVnB;AAWE,YAAA,YAAY,EAAC,OAXf;AAYE,YAAA,aAAa,EAAE,KAZjB;AAaE,YAAA,sBAAsB,MAbxB;AAcE,YAAA,uBAAuB,MAdzB;AAeE,YAAA,MAAM,EAAEmB,iBAfV;AAgBE,YAAA,SAAS,EAAEW,eAhBb;AAiBE,YAAA,UAAU,EAAEN,iBAjBd;AAkBE,YAAA,WAAW,EAAEE,iBAlBf;AAmBE,YAAA,MAAM,EAAE/B,SAAS,GAAG,GAAH,GAAS,MAnB5B;AAoBE,YAAA,OAAO,EAAE,CAACzC,UAAD,EAAaC,aAAb,EAA4BE,cAA5B,EAA4CD,cAA5C,EAA4DE,iBAA5D;AApBX;AAAA;AAAA;AAAA;AAAA,kBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAhBF,eAmDE,QAAC,aAAD;AAAe,QAAA,IAAI,EAAE6C,WAArB;AAAkC,QAAA,OAAO,EAAE6B,gBAA3C;AAAA,gCACE,QAAC,WAAD;AAAA,oBAAc9B,aAAa,GAAG,YAAH,GAAkB;AAA7C;AAAA;AAAA;AAAA;AAAA,gBADF,eAGE,QAAC,YAAD;AAAc,UAAA,KAAK,EAAEA,aAAa,IAAI,EAAtC;AAA0C,UAAA,KAAK,EAAEE,aAAjD;AAAgE,UAAA,QAAQ,EAAE4B;AAA1E;AAAA;AAAA;AAAA;AAAA,gBAHF;AAAA;AAAA;AAAA;AAAA;AAAA,cAnDF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AA6DD;;GAjLuBxC,Q;UACGjB,W,EAERT,W,EAECU,a,EAQIT,W,EAEyBA,W;;;KAfzByB,Q","sourcesContent":["import FullCalendar from '@fullcalendar/react'; // => request placed at the top\r\nimport listPlugin from '@fullcalendar/list';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport timelinePlugin from '@fullcalendar/timeline';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\n//\r\nimport { useState, useRef, useEffect } from 'react';\r\n// @mui\r\nimport { Card, Button, Container, DialogTitle } from '@mui/material';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../redux/store';\r\nimport { getEvents, openModal, closeModal, updateEvent, selectEvent, selectRange } from '../../redux/slices/calendar';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\nimport useResponsive from '../../hooks/useResponsive';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Iconify from '../../components/Iconify';\r\nimport { DialogAnimate } from '../../components/animate';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\n// sections\r\nimport { CalendarForm, CalendarStyle, CalendarToolbar } from '../../sections/@dashboard/calendar';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst selectedEventSelector = (state) => {\r\n  const { events, selectedEventId } = state.calendar;\r\n  if (selectedEventId) {\r\n    return events.find((_event) => _event.id === selectedEventId);\r\n  }\r\n  return null;\r\n};\r\n\r\nexport default function Calendar() {\r\n  const { themeStretch } = useSettings();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const isDesktop = useResponsive('up', 'sm');\r\n\r\n  const calendarRef = useRef(null);\r\n\r\n  const [date, setDate] = useState(new Date());\r\n\r\n  const [view, setView] = useState(isDesktop ? 'dayGridMonth' : 'listWeek');\r\n\r\n  const selectedEvent = useSelector(selectedEventSelector);\r\n\r\n  const { events, isOpenModal, selectedRange } = useSelector((state) => state.calendar);\r\n\r\n  useEffect(() => {\r\n    dispatch(getEvents());\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    const calendarEl = calendarRef.current;\r\n    if (calendarEl) {\r\n      const calendarApi = calendarEl.getApi();\r\n      const newView = isDesktop ? 'dayGridMonth' : 'listWeek';\r\n      calendarApi.changeView(newView);\r\n      setView(newView);\r\n    }\r\n  }, [isDesktop]);\r\n\r\n  const handleClickToday = () => {\r\n    const calendarEl = calendarRef.current;\r\n    if (calendarEl) {\r\n      const calendarApi = calendarEl.getApi();\r\n      calendarApi.today();\r\n      setDate(calendarApi.getDate());\r\n    }\r\n  };\r\n\r\n  const handleChangeView = (newView) => {\r\n    const calendarEl = calendarRef.current;\r\n    if (calendarEl) {\r\n      const calendarApi = calendarEl.getApi();\r\n      calendarApi.changeView(newView);\r\n      setView(newView);\r\n    }\r\n  };\r\n\r\n  const handleClickDatePrev = () => {\r\n    const calendarEl = calendarRef.current;\r\n    if (calendarEl) {\r\n      const calendarApi = calendarEl.getApi();\r\n      calendarApi.prev();\r\n      setDate(calendarApi.getDate());\r\n    }\r\n  };\r\n\r\n  const handleClickDateNext = () => {\r\n    const calendarEl = calendarRef.current;\r\n    if (calendarEl) {\r\n      const calendarApi = calendarEl.getApi();\r\n      calendarApi.next();\r\n      setDate(calendarApi.getDate());\r\n    }\r\n  };\r\n\r\n  const handleSelectRange = (arg) => {\r\n    const calendarEl = calendarRef.current;\r\n    if (calendarEl) {\r\n      const calendarApi = calendarEl.getApi();\r\n      calendarApi.unselect();\r\n    }\r\n    dispatch(selectRange(arg.start, arg.end));\r\n  };\r\n\r\n  const handleSelectEvent = (arg) => {\r\n    dispatch(selectEvent(arg.event.id));\r\n  };\r\n\r\n  const handleResizeEvent = async ({ event }) => {\r\n    try {\r\n      dispatch(\r\n        updateEvent(event.id, {\r\n          allDay: event.allDay,\r\n          start: event.start,\r\n          end: event.end,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleDropEvent = async ({ event }) => {\r\n    try {\r\n      dispatch(\r\n        updateEvent(event.id, {\r\n          allDay: event.allDay,\r\n          start: event.start,\r\n          end: event.end,\r\n        })\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const handleAddEvent = () => {\r\n    dispatch(openModal());\r\n  };\r\n\r\n  const handleCloseModal = () => {\r\n    dispatch(closeModal());\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Calendar\">\r\n      <Container maxWidth={themeStretch ? false : 'xl'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Calendar\"\r\n          links={[{ name: 'Dashboard', href: PATH_DASHBOARD.root }, { name: 'Calendar' }]}\r\n          moreLink=\"https://fullcalendar.io/docs/react\"\r\n          action={\r\n            <Button\r\n              variant=\"contained\"\r\n              startIcon={<Iconify icon={'eva:plus-fill'} width={20} height={20} />}\r\n              onClick={handleAddEvent}\r\n            >\r\n              New Event\r\n            </Button>\r\n          }\r\n        />\r\n\r\n        <Card>\r\n          <CalendarStyle>\r\n            <CalendarToolbar\r\n              date={date}\r\n              view={view}\r\n              onNextDate={handleClickDateNext}\r\n              onPrevDate={handleClickDatePrev}\r\n              onToday={handleClickToday}\r\n              onChangeView={handleChangeView}\r\n            />\r\n            <FullCalendar\r\n              weekends\r\n              editable\r\n              droppable\r\n              selectable\r\n              events={events}\r\n              ref={calendarRef}\r\n              rerenderDelay={10}\r\n              initialDate={date}\r\n              initialView={view}\r\n              dayMaxEventRows={3}\r\n              eventDisplay=\"block\"\r\n              headerToolbar={false}\r\n              allDayMaintainDuration\r\n              eventResizableFromStart\r\n              select={handleSelectRange}\r\n              eventDrop={handleDropEvent}\r\n              eventClick={handleSelectEvent}\r\n              eventResize={handleResizeEvent}\r\n              height={isDesktop ? 720 : 'auto'}\r\n              plugins={[listPlugin, dayGridPlugin, timelinePlugin, timeGridPlugin, interactionPlugin]}\r\n            />\r\n          </CalendarStyle>\r\n        </Card>\r\n\r\n        <DialogAnimate open={isOpenModal} onClose={handleCloseModal}>\r\n          <DialogTitle>{selectedEvent ? 'Edit Event' : 'Add Event'}</DialogTitle>\r\n\r\n          <CalendarForm event={selectedEvent || {}} range={selectedRange} onCancel={handleCloseModal} />\r\n        </DialogAnimate>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}