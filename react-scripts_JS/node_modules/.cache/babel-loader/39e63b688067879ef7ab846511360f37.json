{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\auth\\\\reset-password\\\\ResetPasswordForm.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup'; // form\n\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm } from 'react-hook-form'; // @mui\n\nimport { Stack } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // hooks\n\nimport useIsMountedRef from '../../../hooks/useIsMountedRef'; // components\n\nimport { FormProvider, RHFTextField } from '../../../components/hook-form'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nResetPasswordForm.propTypes = {\n  onSent: PropTypes.func,\n  onGetEmail: PropTypes.func\n};\nexport default function ResetPasswordForm(_ref) {\n  _s();\n\n  let {\n    onSent,\n    onGetEmail\n  } = _ref;\n  const isMountedRef = useIsMountedRef();\n  const ResetPasswordSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required')\n  });\n  const methods = useForm({\n    resolver: yupResolver(ResetPasswordSchema),\n    defaultValues: {\n      email: 'demo@minimals.cc'\n    }\n  });\n  const {\n    handleSubmit,\n    formState: {\n      isSubmitting\n    }\n  } = methods;\n\n  const onSubmit = async data => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      if (isMountedRef.current) {\n        onSent();\n        onGetEmail(data.email);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    methods: methods,\n    onSubmit: handleSubmit(onSubmit),\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 3,\n      children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n        name: \"email\",\n        label: \"Email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        loading: isSubmitting,\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ResetPasswordForm, \"6q2UFyb5ZALqYRtLaAhsabhQEvo=\", false, function () {\n  return [useIsMountedRef, useForm];\n});\n\n_c = ResetPasswordForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"ResetPasswordForm\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/auth/reset-password/ResetPasswordForm.js"],"names":["PropTypes","Yup","yupResolver","useForm","Stack","LoadingButton","useIsMountedRef","FormProvider","RHFTextField","ResetPasswordForm","propTypes","onSent","func","onGetEmail","isMountedRef","ResetPasswordSchema","object","shape","email","string","required","methods","resolver","defaultValues","handleSubmit","formState","isSubmitting","onSubmit","data","Promise","resolve","setTimeout","current","error","console"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CACA;;AACA,SAASC,WAAT,QAA4B,yBAA5B;AACA,SAASC,OAAT,QAAwB,iBAAxB,C,CACA;;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,aAAT,QAA8B,UAA9B,C,CACA;;AACA,OAAOC,eAAP,MAA4B,gCAA5B,C,CACA;;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,+BAA3C,C,CAEA;;;AAEAC,iBAAiB,CAACC,SAAlB,GAA8B;AAC5BC,EAAAA,MAAM,EAAEX,SAAS,CAACY,IADU;AAE5BC,EAAAA,UAAU,EAAEb,SAAS,CAACY;AAFM,CAA9B;AAKA,eAAe,SAASH,iBAAT,OAAmD;AAAA;;AAAA,MAAxB;AAAEE,IAAAA,MAAF;AAAUE,IAAAA;AAAV,GAAwB;AAChE,QAAMC,YAAY,GAAGR,eAAe,EAApC;AAEA,QAAMS,mBAAmB,GAAGd,GAAG,CAACe,MAAJ,GAAaC,KAAb,CAAmB;AAC7CC,IAAAA,KAAK,EAAEjB,GAAG,CAACkB,MAAJ,GAAaD,KAAb,CAAmB,qCAAnB,EAA0DE,QAA1D,CAAmE,mBAAnE;AADsC,GAAnB,CAA5B;AAIA,QAAMC,OAAO,GAAGlB,OAAO,CAAC;AACtBmB,IAAAA,QAAQ,EAAEpB,WAAW,CAACa,mBAAD,CADC;AAEtBQ,IAAAA,aAAa,EAAE;AAAEL,MAAAA,KAAK,EAAE;AAAT;AAFO,GAAD,CAAvB;AAKA,QAAM;AACJM,IAAAA,YADI;AAEJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAFP,MAGFL,OAHJ;;AAKA,QAAMM,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC/B,QAAI;AACF,YAAM,IAAIC,OAAJ,CAAaC,OAAD,IAAaC,UAAU,CAACD,OAAD,EAAU,GAAV,CAAnC,CAAN;;AACA,UAAIhB,YAAY,CAACkB,OAAjB,EAA0B;AACxBrB,QAAAA,MAAM;AACNE,QAAAA,UAAU,CAACe,IAAI,CAACV,KAAN,CAAV;AACD;AACF,KAND,CAME,OAAOe,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAVD;;AAYA,sBACE,QAAC,YAAD;AAAc,IAAA,OAAO,EAAEZ,OAAvB;AAAgC,IAAA,QAAQ,EAAEG,YAAY,CAACG,QAAD,CAAtD;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,CAAhB;AAAA,8BACE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAC,OAAnB;AAA2B,QAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cADF,eAGE,QAAC,aAAD;AAAe,QAAA,SAAS,MAAxB;AAAyB,QAAA,IAAI,EAAC,OAA9B;AAAsC,QAAA,IAAI,EAAC,QAA3C;AAAoD,QAAA,OAAO,EAAC,WAA5D;AAAwE,QAAA,OAAO,EAAED,YAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;GAxCuBjB,iB;UACDH,e,EAMLH,O;;;KAPMM,iB","sourcesContent":["import PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\n// form\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { useForm } from 'react-hook-form';\r\n// @mui\r\nimport { Stack } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// hooks\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n// components\r\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nResetPasswordForm.propTypes = {\r\n  onSent: PropTypes.func,\r\n  onGetEmail: PropTypes.func,\r\n};\r\n\r\nexport default function ResetPasswordForm({ onSent, onGetEmail }) {\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  const ResetPasswordSchema = Yup.object().shape({\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n  });\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(ResetPasswordSchema),\r\n    defaultValues: { email: 'demo@minimals.cc' },\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      await new Promise((resolve) => setTimeout(resolve, 500));\r\n      if (isMountedRef.current) {\r\n        onSent();\r\n        onGetEmail(data.email);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n          Reset Password\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}