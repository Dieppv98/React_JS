{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\auth\\\\register\\\\RegisterForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react'; // form\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // @mui\n\nimport { Stack, IconButton, InputAdornment, Alert } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // hooks\n\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef'; // components\n\nimport Iconify from '../../../components/Iconify';\nimport { FormProvider, RHFTextField } from '../../../components/hook-form'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function RegisterForm() {\n  _s();\n\n  const {\n    register\n  } = useAuth();\n  const isMountedRef = useIsMountedRef();\n  const [showPassword, setShowPassword] = useState(false);\n  const RegisterSchema = Yup.object().shape({\n    firstName: Yup.string().required('First name required'),\n    lastName: Yup.string().required('Last name required'),\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const defaultValues = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: ''\n  };\n  const methods = useForm({\n    resolver: yupResolver(RegisterSchema),\n    defaultValues\n  });\n  const {\n    reset,\n    setError,\n    handleSubmit,\n    formState: {\n      errors,\n      isSubmitting\n    }\n  } = methods;\n\n  const onSubmit = async data => {\n    try {\n      await register(data.email, data.password, data.firstName, data.lastName);\n    } catch (error) {\n      console.error(error);\n      reset();\n\n      if (isMountedRef.current) {\n        setError('afterSubmit', error);\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    methods: methods,\n    onSubmit: handleSubmit(onSubmit),\n    children: /*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 3,\n      children: [!!errors.afterSubmit && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: errors.afterSubmit.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 34\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        direction: {\n          xs: 'column',\n          sm: 'row'\n        },\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n          name: \"firstName\",\n          label: \"First name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n          name: \"lastName\",\n          label: \"Last name\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n        name: \"email\",\n        label: \"Email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n        name: \"password\",\n        label: \"Password\",\n        type: showPassword ? 'text' : 'password',\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              edge: \"end\",\n              onClick: () => setShowPassword(!showPassword),\n              children: /*#__PURE__*/_jsxDEV(Iconify, {\n                icon: showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 83,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n        fullWidth: true,\n        size: \"large\",\n        type: \"submit\",\n        variant: \"contained\",\n        loading: isSubmitting,\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegisterForm, \"7fbajXAEfK9FbLQoN/TFAxhL7n0=\", false, function () {\n  return [useAuth, useIsMountedRef, useForm];\n});\n\n_c = RegisterForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegisterForm\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/auth/register/RegisterForm.js"],"names":["Yup","useState","useForm","yupResolver","Stack","IconButton","InputAdornment","Alert","LoadingButton","useAuth","useIsMountedRef","Iconify","FormProvider","RHFTextField","RegisterForm","register","isMountedRef","showPassword","setShowPassword","RegisterSchema","object","shape","firstName","string","required","lastName","email","password","defaultValues","methods","resolver","reset","setError","handleSubmit","formState","errors","isSubmitting","onSubmit","data","error","console","current","afterSubmit","message","xs","sm","endAdornment"],"mappings":";;;AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAASC,QAAT,QAAyB,OAAzB,C,CACA;;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B,C,CACA;;AACA,SAASC,KAAT,EAAgBC,UAAhB,EAA4BC,cAA5B,EAA4CC,KAA5C,QAAyD,eAAzD;AACA,SAASC,aAAT,QAA8B,UAA9B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,eAAP,MAA4B,gCAA5B,C,CACA;;AACA,OAAOC,OAAP,MAAoB,6BAApB;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,+BAA3C,C,CAEA;;;AAEA,eAAe,SAASC,YAAT,GAAwB;AAAA;;AACrC,QAAM;AAAEC,IAAAA;AAAF,MAAeN,OAAO,EAA5B;AAEA,QAAMO,YAAY,GAAGN,eAAe,EAApC;AAEA,QAAM,CAACO,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,KAAD,CAAhD;AAEA,QAAMkB,cAAc,GAAGnB,GAAG,CAACoB,MAAJ,GAAaC,KAAb,CAAmB;AACxCC,IAAAA,SAAS,EAAEtB,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAD6B;AAExCC,IAAAA,QAAQ,EAAEzB,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,oBAAtB,CAF8B;AAGxCE,IAAAA,KAAK,EAAE1B,GAAG,CAACuB,MAAJ,GAAaG,KAAb,CAAmB,qCAAnB,EAA0DF,QAA1D,CAAmE,mBAAnE,CAHiC;AAIxCG,IAAAA,QAAQ,EAAE3B,GAAG,CAACuB,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB;AAJ8B,GAAnB,CAAvB;AAOA,QAAMI,aAAa,GAAG;AACpBN,IAAAA,SAAS,EAAE,EADS;AAEpBG,IAAAA,QAAQ,EAAE,EAFU;AAGpBC,IAAAA,KAAK,EAAE,EAHa;AAIpBC,IAAAA,QAAQ,EAAE;AAJU,GAAtB;AAOA,QAAME,OAAO,GAAG3B,OAAO,CAAC;AACtB4B,IAAAA,QAAQ,EAAE3B,WAAW,CAACgB,cAAD,CADC;AAEtBS,IAAAA;AAFsB,GAAD,CAAvB;AAKA,QAAM;AACJG,IAAAA,KADI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,YAJI;AAKJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV;AALP,MAMFP,OANJ;;AAQA,QAAMQ,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC/B,QAAI;AACF,YAAMvB,QAAQ,CAACuB,IAAI,CAACZ,KAAN,EAAaY,IAAI,CAACX,QAAlB,EAA4BW,IAAI,CAAChB,SAAjC,EAA4CgB,IAAI,CAACb,QAAjD,CAAd;AACD,KAFD,CAEE,OAAOc,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACAR,MAAAA,KAAK;;AACL,UAAIf,YAAY,CAACyB,OAAjB,EAA0B;AACxBT,QAAAA,QAAQ,CAAC,aAAD,EAAgBO,KAAhB,CAAR;AACD;AACF;AACF,GAVD;;AAYA,sBACE,QAAC,YAAD;AAAc,IAAA,OAAO,EAAEV,OAAvB;AAAgC,IAAA,QAAQ,EAAEI,YAAY,CAACI,QAAD,CAAtD;AAAA,2BACE,QAAC,KAAD;AAAO,MAAA,OAAO,EAAE,CAAhB;AAAA,iBACG,CAAC,CAACF,MAAM,CAACO,WAAT,iBAAwB,QAAC,KAAD;AAAO,QAAA,QAAQ,EAAC,OAAhB;AAAA,kBAAyBP,MAAM,CAACO,WAAP,CAAmBC;AAA5C;AAAA;AAAA;AAAA;AAAA,cAD3B,eAGE,QAAC,KAAD;AAAO,QAAA,SAAS,EAAE;AAAEC,UAAAA,EAAE,EAAE,QAAN;AAAgBC,UAAAA,EAAE,EAAE;AAApB,SAAlB;AAA+C,QAAA,OAAO,EAAE,CAAxD;AAAA,gCACE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,WAAnB;AAA+B,UAAA,KAAK,EAAC;AAArC;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,YAAD;AAAc,UAAA,IAAI,EAAC,UAAnB;AAA8B,UAAA,KAAK,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAQE,QAAC,YAAD;AAAc,QAAA,IAAI,EAAC,OAAnB;AAA2B,QAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,cARF,eAUE,QAAC,YAAD;AACE,QAAA,IAAI,EAAC,UADP;AAEE,QAAA,KAAK,EAAC,UAFR;AAGE,QAAA,IAAI,EAAE5B,YAAY,GAAG,MAAH,GAAY,UAHhC;AAIE,QAAA,UAAU,EAAE;AACV6B,UAAAA,YAAY,eACV,QAAC,cAAD;AAAgB,YAAA,QAAQ,EAAC,KAAzB;AAAA,mCACE,QAAC,UAAD;AAAY,cAAA,IAAI,EAAC,KAAjB;AAAuB,cAAA,OAAO,EAAE,MAAM5B,eAAe,CAAC,CAACD,YAAF,CAArD;AAAA,qCACE,QAAC,OAAD;AAAS,gBAAA,IAAI,EAAEA,YAAY,GAAG,cAAH,GAAoB;AAA/C;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFQ;AAJd;AAAA;AAAA;AAAA;AAAA,cAVF,eAyBE,QAAC,aAAD;AAAe,QAAA,SAAS,MAAxB;AAAyB,QAAA,IAAI,EAAC,OAA9B;AAAsC,QAAA,IAAI,EAAC,QAA3C;AAAoD,QAAA,OAAO,EAAC,WAA5D;AAAwE,QAAA,OAAO,EAAEmB,YAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAiCD;;GA/EuBtB,Y;UACDL,O,EAEAC,e,EAkBLR,O;;;KArBMY,Y","sourcesContent":["import * as Yup from 'yup';\r\nimport { useState } from 'react';\r\n// form\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { Stack, IconButton, InputAdornment, Alert } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n// components\r\nimport Iconify from '../../../components/Iconify';\r\nimport { FormProvider, RHFTextField } from '../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function RegisterForm() {\r\n  const { register } = useAuth();\r\n\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const RegisterSchema = Yup.object().shape({\r\n    firstName: Yup.string().required('First name required'),\r\n    lastName: Yup.string().required('Last name required'),\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n    password: Yup.string().required('Password is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    password: '',\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(RegisterSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      await register(data.email, data.password, data.firstName, data.lastName);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      if (isMountedRef.current) {\r\n        setError('afterSubmit', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        {!!errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>}\r\n\r\n        <Stack direction={{ xs: 'column', sm: 'row' }} spacing={2}>\r\n          <RHFTextField name=\"firstName\" label=\"First name\" />\r\n          <RHFTextField name=\"lastName\" label=\"Last name\" />\r\n        </Stack>\r\n\r\n        <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton edge=\"end\" onClick={() => setShowPassword(!showPassword)}>\r\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n\r\n        <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n          Register\r\n        </LoadingButton>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}