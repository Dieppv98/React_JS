{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\@dashboard\\\\mail\\\\MailList.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react'; // @mui\n\nimport { styled } from '@mui/material/styles';\nimport { Divider, Box } from '@mui/material'; // redux\n\nimport { useDispatch, useSelector } from '../../../redux/store';\nimport { getMails } from '../../../redux/slices/mail'; //\n\nimport Scrollbar from '../../../components/Scrollbar';\nimport EmptyContent from '../../../components/EmptyContent';\nimport MailItem from './MailItem';\nimport MailToolbar from './MailToolbar'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RootStyle = styled('div')({\n  flexGrow: 1,\n  display: 'flex',\n  overflow: 'hidden',\n  flexDirection: 'column'\n}); // ----------------------------------------------------------------------\n\nMailList.propTypes = {\n  onOpenSidebar: PropTypes.func\n};\nexport default function MailList(_ref) {\n  _s();\n\n  let {\n    onOpenSidebar\n  } = _ref;\n  const params = useParams();\n  const dispatch = useDispatch();\n  const {\n    mails\n  } = useSelector(state => state.mail);\n  const [selectedMails, setSelectedMails] = useState([]);\n  const [dense, setDense] = useState(false);\n  const isEmpty = mails.allIds.length < 1;\n  useEffect(() => {\n    dispatch(getMails(params));\n  }, [dispatch, params]);\n\n  const handleSelectAllMails = () => {\n    setSelectedMails(mails.allIds.map(mailId => mailId));\n  };\n\n  const handleToggleDense = () => {\n    setDense(prev => !prev);\n  };\n\n  const handleDeselectAllMails = () => {\n    setSelectedMails([]);\n  };\n\n  const handleSelectOneMail = mailId => {\n    setSelectedMails(prevSelectedMails => {\n      if (!prevSelectedMails.includes(mailId)) {\n        return [...prevSelectedMails, mailId];\n      }\n\n      return prevSelectedMails;\n    });\n  };\n\n  const handleDeselectOneMail = mailId => {\n    setSelectedMails(prevSelectedMails => prevSelectedMails.filter(id => id !== mailId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(RootStyle, {\n    children: [/*#__PURE__*/_jsxDEV(MailToolbar, {\n      mails: mails.allIds.length,\n      selectedMails: selectedMails.length,\n      onSelectAll: handleSelectAllMails,\n      onOpenSidebar: onOpenSidebar,\n      onDeselectAll: handleDeselectAllMails,\n      onToggleDense: handleToggleDense\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), !isEmpty ? /*#__PURE__*/_jsxDEV(Scrollbar, {\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          minWidth: {\n            md: 800\n          }\n        },\n        children: mails.allIds.map(mailId => /*#__PURE__*/_jsxDEV(MailItem, {\n          isDense: dense,\n          mail: mails.byId[mailId],\n          isSelected: selectedMails.includes(mailId),\n          onSelect: () => handleSelectOneMail(mailId),\n          onDeselect: () => handleDeselectOneMail(mailId)\n        }, mailId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(EmptyContent, {\n      title: \"There is no conversation\",\n      img: \"https://minimal-assets-api.vercel.app/assets/illustrations/illustration_empty_mail.svg\",\n      sx: {\n        flexGrow: 1,\n        height: 'auto'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n\n_s(MailList, \"3JJnRDprWgw3Ec3e9GxBT2k9zX8=\", false, function () {\n  return [useParams, useDispatch, useSelector];\n});\n\n_c = MailList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MailList\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/@dashboard/mail/MailList.js"],"names":["PropTypes","useParams","useState","useEffect","styled","Divider","Box","useDispatch","useSelector","getMails","Scrollbar","EmptyContent","MailItem","MailToolbar","RootStyle","flexGrow","display","overflow","flexDirection","MailList","propTypes","onOpenSidebar","func","params","dispatch","mails","state","mail","selectedMails","setSelectedMails","dense","setDense","isEmpty","allIds","length","handleSelectAllMails","map","mailId","handleToggleDense","prev","handleDeselectAllMails","handleSelectOneMail","prevSelectedMails","includes","handleDeselectOneMail","filter","id","minWidth","md","byId","height"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n// @mui\r\nimport { styled } from '@mui/material/styles';\r\nimport { Divider, Box } from '@mui/material';\r\n// redux\r\nimport { useDispatch, useSelector } from '../../../redux/store';\r\nimport { getMails } from '../../../redux/slices/mail';\r\n//\r\nimport Scrollbar from '../../../components/Scrollbar';\r\nimport EmptyContent from '../../../components/EmptyContent';\r\nimport MailItem from './MailItem';\r\nimport MailToolbar from './MailToolbar';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst RootStyle = styled('div')({\r\n  flexGrow: 1,\r\n  display: 'flex',\r\n  overflow: 'hidden',\r\n  flexDirection: 'column',\r\n});\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nMailList.propTypes = {\r\n  onOpenSidebar: PropTypes.func,\r\n};\r\n\r\nexport default function MailList({ onOpenSidebar }) {\r\n  const params = useParams();\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const { mails } = useSelector((state) => state.mail);\r\n\r\n  const [selectedMails, setSelectedMails] = useState([]);\r\n\r\n  const [dense, setDense] = useState(false);\r\n\r\n  const isEmpty = mails.allIds.length < 1;\r\n\r\n  useEffect(() => {\r\n    dispatch(getMails(params));\r\n  }, [dispatch, params]);\r\n\r\n  const handleSelectAllMails = () => {\r\n    setSelectedMails(mails.allIds.map((mailId) => mailId));\r\n  };\r\n\r\n  const handleToggleDense = () => {\r\n    setDense((prev) => !prev);\r\n  };\r\n\r\n  const handleDeselectAllMails = () => {\r\n    setSelectedMails([]);\r\n  };\r\n\r\n  const handleSelectOneMail = (mailId) => {\r\n    setSelectedMails((prevSelectedMails) => {\r\n      if (!prevSelectedMails.includes(mailId)) {\r\n        return [...prevSelectedMails, mailId];\r\n      }\r\n      return prevSelectedMails;\r\n    });\r\n  };\r\n\r\n  const handleDeselectOneMail = (mailId) => {\r\n    setSelectedMails((prevSelectedMails) => prevSelectedMails.filter((id) => id !== mailId));\r\n  };\r\n\r\n  return (\r\n    <RootStyle>\r\n      <MailToolbar\r\n        mails={mails.allIds.length}\r\n        selectedMails={selectedMails.length}\r\n        onSelectAll={handleSelectAllMails}\r\n        onOpenSidebar={onOpenSidebar}\r\n        onDeselectAll={handleDeselectAllMails}\r\n        onToggleDense={handleToggleDense}\r\n      />\r\n\r\n      <Divider />\r\n\r\n      {!isEmpty ? (\r\n        <Scrollbar>\r\n          <Box sx={{ minWidth: { md: 800 } }}>\r\n            {mails.allIds.map((mailId) => (\r\n              <MailItem\r\n                key={mailId}\r\n                isDense={dense}\r\n                mail={mails.byId[mailId]}\r\n                isSelected={selectedMails.includes(mailId)}\r\n                onSelect={() => handleSelectOneMail(mailId)}\r\n                onDeselect={() => handleDeselectOneMail(mailId)}\r\n              />\r\n            ))}\r\n          </Box>\r\n        </Scrollbar>\r\n      ) : (\r\n        <EmptyContent\r\n          title=\"There is no conversation\"\r\n          img=\"https://minimal-assets-api.vercel.app/assets/illustrations/illustration_empty_mail.svg\"\r\n          sx={{ flexGrow: 1, height: 'auto' }}\r\n        />\r\n      )}\r\n    </RootStyle>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}