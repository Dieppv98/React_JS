{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\components\\\\animate\\\\IconButtonAnimate.js\";\nimport PropTypes from 'prop-types';\nimport { m } from 'framer-motion';\nimport { forwardRef } from 'react'; // @mui\n\nimport { Box, IconButton } from '@mui/material'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IconButtonAnimate = /*#__PURE__*/forwardRef(_c = (_ref, ref) => {\n  let {\n    children,\n    size = 'medium',\n    ...other\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(AnimateWrap, {\n    size: size,\n    children: /*#__PURE__*/_jsxDEV(IconButton, {\n      size: size,\n      ref: ref,\n      ...other,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 3\n  }, this);\n});\n_c2 = IconButtonAnimate;\nIconButtonAnimate.propTypes = {\n  children: PropTypes.node.isRequired,\n  color: PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'info', 'success', 'warning', 'error']),\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\n};\nexport default IconButtonAnimate; // ----------------------------------------------------------------------\n\nconst varSmall = {\n  hover: {\n    scale: 1.1\n  },\n  tap: {\n    scale: 0.95\n  }\n};\nconst varMedium = {\n  hover: {\n    scale: 1.09\n  },\n  tap: {\n    scale: 0.97\n  }\n};\nconst varLarge = {\n  hover: {\n    scale: 1.08\n  },\n  tap: {\n    scale: 0.99\n  }\n};\nAnimateWrap.propTypes = {\n  children: PropTypes.node.isRequired,\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\n};\n\nfunction AnimateWrap(_ref2) {\n  let {\n    size,\n    children\n  } = _ref2;\n  const isSmall = size === 'small';\n  const isLarge = size === 'large';\n  return /*#__PURE__*/_jsxDEV(Box, {\n    component: m.div,\n    whileTap: \"tap\",\n    whileHover: \"hover\",\n    variants: isSmall && varSmall || isLarge && varLarge || varMedium,\n    sx: {\n      display: 'inline-flex'\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = AnimateWrap;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"IconButtonAnimate$forwardRef\");\n$RefreshReg$(_c2, \"IconButtonAnimate\");\n$RefreshReg$(_c3, \"AnimateWrap\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/components/animate/IconButtonAnimate.js"],"names":["PropTypes","m","forwardRef","Box","IconButton","IconButtonAnimate","ref","children","size","other","propTypes","node","isRequired","color","oneOf","varSmall","hover","scale","tap","varMedium","varLarge","AnimateWrap","isSmall","isLarge","div","display"],"mappings":";AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,SAASC,CAAT,QAAkB,eAAlB;AACA,SAASC,UAAT,QAA2B,OAA3B,C,CACA;;AACA,SAASC,GAAT,EAAcC,UAAd,QAAgC,eAAhC,C,CAEA;;;AAEA,MAAMC,iBAAiB,gBAAGH,UAAU,MAAC,OAA0CI,GAA1C;AAAA,MAAC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,IAAI,GAAG,QAAnB;AAA6B,OAAGC;AAAhC,GAAD;AAAA,sBACnC,QAAC,WAAD;AAAa,IAAA,IAAI,EAAED,IAAnB;AAAA,2BACE,QAAC,UAAD;AAAY,MAAA,IAAI,EAAEA,IAAlB;AAAwB,MAAA,GAAG,EAAEF,GAA7B;AAAA,SAAsCG,KAAtC;AAAA,gBACGF;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADmC;AAAA,CAAD,CAApC;MAAMF,iB;AAQNA,iBAAiB,CAACK,SAAlB,GAA8B;AAC5BH,EAAAA,QAAQ,EAAEP,SAAS,CAACW,IAAV,CAAeC,UADG;AAE5BC,EAAAA,KAAK,EAAEb,SAAS,CAACc,KAAV,CAAgB,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,WAAlC,EAA+C,MAA/C,EAAuD,SAAvD,EAAkE,SAAlE,EAA6E,OAA7E,CAAhB,CAFqB;AAG5BN,EAAAA,IAAI,EAAER,SAAS,CAACc,KAAV,CAAgB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAAhB;AAHsB,CAA9B;AAMA,eAAeT,iBAAf,C,CAEA;;AAEA,MAAMU,QAAQ,GAAG;AACfC,EAAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GADQ;AAEfC,EAAAA,GAAG,EAAE;AAAED,IAAAA,KAAK,EAAE;AAAT;AAFU,CAAjB;AAKA,MAAME,SAAS,GAAG;AAChBH,EAAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GADS;AAEhBC,EAAAA,GAAG,EAAE;AAAED,IAAAA,KAAK,EAAE;AAAT;AAFW,CAAlB;AAKA,MAAMG,QAAQ,GAAG;AACfJ,EAAAA,KAAK,EAAE;AAAEC,IAAAA,KAAK,EAAE;AAAT,GADQ;AAEfC,EAAAA,GAAG,EAAE;AAAED,IAAAA,KAAK,EAAE;AAAT;AAFU,CAAjB;AAKAI,WAAW,CAACX,SAAZ,GAAwB;AACtBH,EAAAA,QAAQ,EAAEP,SAAS,CAACW,IAAV,CAAeC,UADH;AAEtBJ,EAAAA,IAAI,EAAER,SAAS,CAACc,KAAV,CAAgB,CAAC,OAAD,EAAU,QAAV,EAAoB,OAApB,CAAhB;AAFgB,CAAxB;;AAKA,SAASO,WAAT,QAAyC;AAAA,MAApB;AAAEb,IAAAA,IAAF;AAAQD,IAAAA;AAAR,GAAoB;AACvC,QAAMe,OAAO,GAAGd,IAAI,KAAK,OAAzB;AACA,QAAMe,OAAO,GAAGf,IAAI,KAAK,OAAzB;AAEA,sBACE,QAAC,GAAD;AACE,IAAA,SAAS,EAAEP,CAAC,CAACuB,GADf;AAEE,IAAA,QAAQ,EAAC,KAFX;AAGE,IAAA,UAAU,EAAC,OAHb;AAIE,IAAA,QAAQ,EAAGF,OAAO,IAAIP,QAAZ,IAA0BQ,OAAO,IAAIH,QAArC,IAAkDD,SAJ9D;AAKE,IAAA,EAAE,EAAE;AACFM,MAAAA,OAAO,EAAE;AADP,KALN;AAAA,cASGlB;AATH;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;MAjBQc,W","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { m } from 'framer-motion';\r\nimport { forwardRef } from 'react';\r\n// @mui\r\nimport { Box, IconButton } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst IconButtonAnimate = forwardRef(({ children, size = 'medium', ...other }, ref) => (\r\n  <AnimateWrap size={size}>\r\n    <IconButton size={size} ref={ref} {...other}>\r\n      {children}\r\n    </IconButton>\r\n  </AnimateWrap>\r\n));\r\n\r\nIconButtonAnimate.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  color: PropTypes.oneOf(['inherit', 'default', 'primary', 'secondary', 'info', 'success', 'warning', 'error']),\r\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\r\n};\r\n\r\nexport default IconButtonAnimate;\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst varSmall = {\r\n  hover: { scale: 1.1 },\r\n  tap: { scale: 0.95 }\r\n};\r\n\r\nconst varMedium = {\r\n  hover: { scale: 1.09 },\r\n  tap: { scale: 0.97 }\r\n};\r\n\r\nconst varLarge = {\r\n  hover: { scale: 1.08 },\r\n  tap: { scale: 0.99 }\r\n};\r\n\r\nAnimateWrap.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n  size: PropTypes.oneOf(['small', 'medium', 'large'])\r\n};\r\n\r\nfunction AnimateWrap({ size, children }) {\r\n  const isSmall = size === 'small';\r\n  const isLarge = size === 'large';\r\n\r\n  return (\r\n    <Box\r\n      component={m.div}\r\n      whileTap=\"tap\"\r\n      whileHover=\"hover\"\r\n      variants={(isSmall && varSmall) || (isLarge && varLarge) || varMedium}\r\n      sx={{\r\n        display: 'inline-flex'\r\n      }}\r\n    >\r\n      {children}\r\n    </Box>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}