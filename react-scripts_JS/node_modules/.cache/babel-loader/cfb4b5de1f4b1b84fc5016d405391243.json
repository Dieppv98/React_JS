{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\pages\\\\dashboard\\\\BlogPosts.js\",\n    _s = $RefreshSig$();\n\nimport orderBy from 'lodash/orderBy';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useEffect, useCallback, useState } from 'react'; // @mui\n\nimport { Grid, Button, Container, Stack } from '@mui/material'; // hooks\n\nimport useSettings from '../../hooks/useSettings';\nimport useIsMountedRef from '../../hooks/useIsMountedRef'; // utils\n\nimport axios from '../../utils/axios'; // routes\n\nimport { PATH_DASHBOARD } from '../../routes/paths'; // components\n\nimport Page from '../../components/Page';\nimport Iconify from '../../components/Iconify';\nimport { SkeletonPostItem } from '../../components/skeleton';\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs'; // sections\n\nimport { BlogPostCard, BlogPostsSort, BlogPostsSearch } from '../../sections/@dashboard/blog'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SORT_OPTIONS = [{\n  value: 'latest',\n  label: 'Latest'\n}, {\n  value: 'popular',\n  label: 'Popular'\n}, {\n  value: 'oldest',\n  label: 'Oldest'\n}]; // ----------------------------------------------------------------------\n\nconst applySort = (posts, sortBy) => {\n  if (sortBy === 'latest') {\n    return orderBy(posts, ['createdAt'], ['desc']);\n  }\n\n  if (sortBy === 'oldest') {\n    return orderBy(posts, ['createdAt'], ['asc']);\n  }\n\n  if (sortBy === 'popular') {\n    return orderBy(posts, ['view'], ['desc']);\n  }\n\n  return posts;\n};\n\nexport default function BlogPosts() {\n  _s();\n\n  const {\n    themeStretch\n  } = useSettings();\n  const isMountedRef = useIsMountedRef();\n  const [posts, setPosts] = useState([]);\n  const [filters, setFilters] = useState('latest');\n  const sortedPosts = applySort(posts, filters);\n  const getAllPosts = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/blog/posts/all');\n\n      if (isMountedRef.current) {\n        setPosts(response.data.posts);\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }, [isMountedRef]);\n  useEffect(() => {\n    getAllPosts();\n  }, [getAllPosts]);\n\n  const handleChangeSort = value => {\n    if (value) {\n      setFilters(value);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    title: \"Blog: Posts\",\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: themeStretch ? false : 'lg',\n      children: [/*#__PURE__*/_jsxDEV(HeaderBreadcrumbs, {\n        heading: \"Blog\",\n        links: [{\n          name: 'Dashboard',\n          href: PATH_DASHBOARD.root\n        }, {\n          name: 'Blog',\n          href: PATH_DASHBOARD.blog.root\n        }, {\n          name: 'Posts'\n        }],\n        action: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          component: RouterLink,\n          to: PATH_DASHBOARD.blog.newPost,\n          startIcon: /*#__PURE__*/_jsxDEV(Iconify, {\n            icon: 'eva:plus-fill'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 26\n          }, this),\n          children: \"New Post\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Stack, {\n        mb: 5,\n        direction: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        children: [/*#__PURE__*/_jsxDEV(BlogPostsSearch, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(BlogPostsSort, {\n          query: filters,\n          options: SORT_OPTIONS,\n          onSort: handleChangeSort\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 3,\n        children: (!posts.length ? [...Array(12)] : sortedPosts).map((post, index) => post ? /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          sm: 6,\n          md: index === 0 && 6 || 3,\n          children: /*#__PURE__*/_jsxDEV(BlogPostCard, {\n            post: post,\n            index: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 17\n          }, this)\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(SkeletonPostItem, {}, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n\n_s(BlogPosts, \"7g4nGa2QJWHRyqFz6uQiXe8dpQA=\", false, function () {\n  return [useSettings, useIsMountedRef];\n});\n\n_c = BlogPosts;\n\nvar _c;\n\n$RefreshReg$(_c, \"BlogPosts\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/pages/dashboard/BlogPosts.js"],"names":["orderBy","Link","RouterLink","useEffect","useCallback","useState","Grid","Button","Container","Stack","useSettings","useIsMountedRef","axios","PATH_DASHBOARD","Page","Iconify","SkeletonPostItem","HeaderBreadcrumbs","BlogPostCard","BlogPostsSort","BlogPostsSearch","SORT_OPTIONS","value","label","applySort","posts","sortBy","BlogPosts","themeStretch","isMountedRef","setPosts","filters","setFilters","sortedPosts","getAllPosts","response","get","current","data","error","console","handleChangeSort","name","href","root","blog","newPost","length","Array","map","post","index","id"],"mappings":"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","sourcesContent":["import orderBy from 'lodash/orderBy';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { useEffect, useCallback, useState } from 'react';\r\n// @mui\r\nimport { Grid, Button, Container, Stack } from '@mui/material';\r\n// hooks\r\nimport useSettings from '../../hooks/useSettings';\r\nimport useIsMountedRef from '../../hooks/useIsMountedRef';\r\n// utils\r\nimport axios from '../../utils/axios';\r\n// routes\r\nimport { PATH_DASHBOARD } from '../../routes/paths';\r\n// components\r\nimport Page from '../../components/Page';\r\nimport Iconify from '../../components/Iconify';\r\nimport { SkeletonPostItem } from '../../components/skeleton';\r\nimport HeaderBreadcrumbs from '../../components/HeaderBreadcrumbs';\r\n// sections\r\nimport { BlogPostCard, BlogPostsSort, BlogPostsSearch } from '../../sections/@dashboard/blog';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst SORT_OPTIONS = [\r\n  { value: 'latest', label: 'Latest' },\r\n  { value: 'popular', label: 'Popular' },\r\n  { value: 'oldest', label: 'Oldest' },\r\n];\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst applySort = (posts, sortBy) => {\r\n  if (sortBy === 'latest') {\r\n    return orderBy(posts, ['createdAt'], ['desc']);\r\n  }\r\n  if (sortBy === 'oldest') {\r\n    return orderBy(posts, ['createdAt'], ['asc']);\r\n  }\r\n  if (sortBy === 'popular') {\r\n    return orderBy(posts, ['view'], ['desc']);\r\n  }\r\n  return posts;\r\n};\r\n\r\nexport default function BlogPosts() {\r\n  const { themeStretch } = useSettings();\r\n\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  const [filters, setFilters] = useState('latest');\r\n\r\n  const sortedPosts = applySort(posts, filters);\r\n\r\n  const getAllPosts = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/api/blog/posts/all');\r\n\r\n      if (isMountedRef.current) {\r\n        setPosts(response.data.posts);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [isMountedRef]);\r\n\r\n  useEffect(() => {\r\n    getAllPosts();\r\n  }, [getAllPosts]);\r\n\r\n  const handleChangeSort = (value) => {\r\n    if (value) {\r\n      setFilters(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Page title=\"Blog: Posts\">\r\n      <Container maxWidth={themeStretch ? false : 'lg'}>\r\n        <HeaderBreadcrumbs\r\n          heading=\"Blog\"\r\n          links={[\r\n            { name: 'Dashboard', href: PATH_DASHBOARD.root },\r\n            { name: 'Blog', href: PATH_DASHBOARD.blog.root },\r\n            { name: 'Posts' },\r\n          ]}\r\n          action={\r\n            <Button\r\n              variant=\"contained\"\r\n              component={RouterLink}\r\n              to={PATH_DASHBOARD.blog.newPost}\r\n              startIcon={<Iconify icon={'eva:plus-fill'} />}\r\n            >\r\n              New Post\r\n            </Button>\r\n          }\r\n        />\r\n\r\n        <Stack mb={5} direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n          <BlogPostsSearch />\r\n          <BlogPostsSort query={filters} options={SORT_OPTIONS} onSort={handleChangeSort} />\r\n        </Stack>\r\n\r\n        <Grid container spacing={3}>\r\n          {(!posts.length ? [...Array(12)] : sortedPosts).map((post, index) =>\r\n            post ? (\r\n              <Grid key={post.id} item xs={12} sm={6} md={(index === 0 && 6) || 3}>\r\n                <BlogPostCard post={post} index={index} />\r\n              </Grid>\r\n            ) : (\r\n              <SkeletonPostItem key={index} />\r\n            )\r\n          )}\r\n        </Grid>\r\n      </Container>\r\n    </Page>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}