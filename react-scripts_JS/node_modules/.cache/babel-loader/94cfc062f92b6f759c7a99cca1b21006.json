{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\contexts\\\\SettingsContext.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport { createContext } from 'react'; // hooks\n\nimport useLocalStorage from '../hooks/useLocalStorage'; // utils\n\nimport getColorPresets, { colorPresets, defaultPreset } from '../utils/getColorPresets'; // config\n\nimport { defaultSettings } from '../config'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = { ...defaultSettings,\n  onChangeMode: () => {},\n  onToggleMode: () => {},\n  onChangeDirection: () => {},\n  onChangeColor: () => {},\n  onToggleStretch: () => {},\n  onChangeLayout: () => {},\n  onResetSetting: () => {},\n  setColor: defaultPreset,\n  colorOption: []\n};\nconst SettingsContext = /*#__PURE__*/createContext(initialState); // ----------------------------------------------------------------------\n\nSettingsProvider.propTypes = {\n  children: PropTypes.node\n};\n\nfunction SettingsProvider(_ref) {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [settings, setSettings] = useLocalStorage('settings', {\n    themeMode: initialState.themeMode,\n    themeDirection: initialState.themeDirection,\n    themeColorPresets: initialState.themeColorPresets,\n    themeStretch: initialState.themeStretch,\n    themeLayout: initialState.themeLayout\n  });\n\n  const onChangeMode = event => {\n    setSettings({ ...settings,\n      themeMode: event.target.value\n    });\n  };\n\n  const onToggleMode = () => {\n    setSettings({ ...settings,\n      themeMode: settings.themeMode === 'light' ? 'dark' : 'light'\n    });\n  };\n\n  const onChangeDirection = event => {\n    setSettings({ ...settings,\n      themeDirection: event.target.value\n    });\n  };\n\n  const onChangeColor = event => {\n    setSettings({ ...settings,\n      themeColorPresets: event.target.value\n    });\n  };\n\n  const onChangeLayout = event => {\n    setSettings({ ...settings,\n      themeLayout: event.target.value\n    });\n  };\n\n  const onToggleStretch = () => {\n    setSettings({ ...settings,\n      themeStretch: !settings.themeStretch\n    });\n  };\n\n  const onResetSetting = () => {\n    setSettings({\n      themeMode: initialState.themeMode,\n      themeLayout: initialState.themeLayout,\n      themeStretch: initialState.themeStretch,\n      themeDirection: initialState.themeDirection,\n      themeColorPresets: initialState.themeColorPresets\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SettingsContext.Provider, {\n    value: { ...settings,\n      // Mode\n      onChangeMode,\n      onToggleMode,\n      // Direction\n      onChangeDirection,\n      // Color\n      onChangeColor,\n      setColor: getColorPresets(settings.themeColorPresets),\n      colorOption: colorPresets.map(color => ({\n        name: color.name,\n        value: color.main\n      })),\n      // Stretch\n      onToggleStretch,\n      // Navbar Horizontal\n      onChangeLayout,\n      // Reset Setting\n      onResetSetting\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SettingsProvider, \"zUV0jt8H91QSu9U3MGRBQ1WCbEg=\", false, function () {\n  return [useLocalStorage];\n});\n\n_c = SettingsProvider;\nexport { SettingsProvider, SettingsContext };\n\nvar _c;\n\n$RefreshReg$(_c, \"SettingsProvider\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/contexts/SettingsContext.js"],"names":["PropTypes","createContext","useLocalStorage","getColorPresets","colorPresets","defaultPreset","defaultSettings","initialState","onChangeMode","onToggleMode","onChangeDirection","onChangeColor","onToggleStretch","onChangeLayout","onResetSetting","setColor","colorOption","SettingsContext","SettingsProvider","propTypes","children","node","settings","setSettings","themeMode","themeDirection","themeColorPresets","themeStretch","themeLayout","event","target","value","map","color","name","main"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\r\nimport { createContext } from 'react';\r\n// hooks\r\nimport useLocalStorage from '../hooks/useLocalStorage';\r\n// utils\r\nimport getColorPresets, { colorPresets, defaultPreset } from '../utils/getColorPresets';\r\n// config\r\nimport { defaultSettings } from '../config';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nconst initialState = {\r\n  ...defaultSettings,\r\n  onChangeMode: () => {},\r\n  onToggleMode: () => {},\r\n  onChangeDirection: () => {},\r\n  onChangeColor: () => {},\r\n  onToggleStretch: () => {},\r\n  onChangeLayout: () => {},\r\n  onResetSetting: () => {},\r\n  setColor: defaultPreset,\r\n  colorOption: [],\r\n};\r\n\r\nconst SettingsContext = createContext(initialState);\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nSettingsProvider.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nfunction SettingsProvider({ children }) {\r\n  const [settings, setSettings] = useLocalStorage('settings', {\r\n    themeMode: initialState.themeMode,\r\n    themeDirection: initialState.themeDirection,\r\n    themeColorPresets: initialState.themeColorPresets,\r\n    themeStretch: initialState.themeStretch,\r\n    themeLayout: initialState.themeLayout,\r\n  });\r\n\r\n  const onChangeMode = (event) => {\r\n    setSettings({\r\n      ...settings,\r\n      themeMode: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onToggleMode = () => {\r\n    setSettings({\r\n      ...settings,\r\n      themeMode: settings.themeMode === 'light' ? 'dark' : 'light',\r\n    });\r\n  };\r\n\r\n  const onChangeDirection = (event) => {\r\n    setSettings({\r\n      ...settings,\r\n      themeDirection: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onChangeColor = (event) => {\r\n    setSettings({\r\n      ...settings,\r\n      themeColorPresets: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onChangeLayout = (event) => {\r\n    setSettings({\r\n      ...settings,\r\n      themeLayout: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onToggleStretch = () => {\r\n    setSettings({\r\n      ...settings,\r\n      themeStretch: !settings.themeStretch,\r\n    });\r\n  };\r\n\r\n  const onResetSetting = () => {\r\n    setSettings({\r\n      themeMode: initialState.themeMode,\r\n      themeLayout: initialState.themeLayout,\r\n      themeStretch: initialState.themeStretch,\r\n      themeDirection: initialState.themeDirection,\r\n      themeColorPresets: initialState.themeColorPresets,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <SettingsContext.Provider\r\n      value={{\r\n        ...settings,\r\n        // Mode\r\n        onChangeMode,\r\n        onToggleMode,\r\n        // Direction\r\n        onChangeDirection,\r\n        // Color\r\n        onChangeColor,\r\n        setColor: getColorPresets(settings.themeColorPresets),\r\n        colorOption: colorPresets.map((color) => ({\r\n          name: color.name,\r\n          value: color.main,\r\n        })),\r\n        // Stretch\r\n        onToggleStretch,\r\n        // Navbar Horizontal\r\n        onChangeLayout,\r\n        // Reset Setting\r\n        onResetSetting,\r\n      }}\r\n    >\r\n      {children}\r\n    </SettingsContext.Provider>\r\n  );\r\n}\r\n\r\nexport { SettingsProvider, SettingsContext };\r\n"]},"metadata":{},"sourceType":"module"}