{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\auth\\\\login\\\\LoginForm.js\",\n    _s = $RefreshSig$();\n\nimport * as Yup from 'yup';\nimport { useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom'; // form\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // @mui\n\nimport { Link, Stack, Alert, IconButton, InputAdornment } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // routes\n\nimport { PATH_AUTH } from '../../../routes/paths'; // hooks\n\nimport useAuth from '../../../hooks/useAuth';\nimport useIsMountedRef from '../../../hooks/useIsMountedRef'; // components\n\nimport Iconify from '../../../components/Iconify';\nimport { FormProvider, RHFTextField, RHFCheckbox } from '../../../components/hook-form'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LoginForm() {\n  _s();\n\n  const {\n    login\n  } = useAuth();\n  const isMountedRef = useIsMountedRef();\n  const [showPassword, setShowPassword] = useState(false);\n  const LoginSchema = Yup.object().shape({\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\n    password: Yup.string().required('Password is required')\n  });\n  const defaultValues = {\n    email: 'demo@minimals.cc',\n    password: 'demo1234',\n    remember: true\n  };\n  const methods = useForm({\n    resolver: yupResolver(LoginSchema),\n    defaultValues\n  });\n  const {\n    reset,\n    setError,\n    handleSubmit,\n    formState: {\n      errors,\n      isSubmitting\n    }\n  } = methods;\n\n  const onSubmit = async data => {\n    console.log('data 9990', data);\n\n    try {\n      await login(data.email, data.password);\n    } catch (error) {\n      console.error(error);\n      reset();\n\n      if (isMountedRef.current) {\n        setError('afterSubmit', 'Lỗi rồi!');\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(FormProvider, {\n    methods: methods,\n    onSubmit: handleSubmit(onSubmit),\n    children: [/*#__PURE__*/_jsxDEV(Stack, {\n      spacing: 3,\n      children: [errors.afterSubmit && /*#__PURE__*/_jsxDEV(Alert, {\n        severity: \"error\",\n        children: errors.afterSubmit.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 32\n      }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n        name: \"email\",\n        label: \"Email address\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n        name: \"password\",\n        label: \"Password\",\n        type: showPassword ? 'text' : 'password',\n        InputProps: {\n          endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n            position: \"end\",\n            children: /*#__PURE__*/_jsxDEV(IconButton, {\n              onClick: () => setShowPassword(!showPassword),\n              edge: \"end\",\n              children: /*#__PURE__*/_jsxDEV(Iconify, {\n                icon: showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this)\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Stack, {\n      direction: \"row\",\n      alignItems: \"center\",\n      justifyContent: \"space-between\",\n      sx: {\n        my: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(RHFCheckbox, {\n        name: \"remember\",\n        label: \"Remember me\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        component: RouterLink,\n        variant: \"subtitle2\",\n        to: PATH_AUTH.resetPassword,\n        children: \"Forgot password?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(LoadingButton, {\n      fullWidth: true,\n      size: \"large\",\n      type: \"submit\",\n      variant: \"contained\",\n      loading: isSubmitting,\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n\n_s(LoginForm, \"peK7mt+psxZpuI+vM5UPXydgneQ=\", false, function () {\n  return [useAuth, useIsMountedRef, useForm];\n});\n\n_c = LoginForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/auth/login/LoginForm.js"],"names":["Yup","useState","Link","RouterLink","useForm","yupResolver","Stack","Alert","IconButton","InputAdornment","LoadingButton","PATH_AUTH","useAuth","useIsMountedRef","Iconify","FormProvider","RHFTextField","RHFCheckbox","LoginForm","login","isMountedRef","showPassword","setShowPassword","LoginSchema","object","shape","email","string","required","password","defaultValues","remember","methods","resolver","reset","setError","handleSubmit","formState","errors","isSubmitting","onSubmit","data","console","log","error","current","afterSubmit","message","endAdornment","my","resetPassword"],"mappings":"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","sourcesContent":["import * as Yup from 'yup';\r\nimport { useState } from 'react';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n// form\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { Link, Stack, Alert, IconButton, InputAdornment } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// routes\r\nimport { PATH_AUTH } from '../../../routes/paths';\r\n// hooks\r\nimport useAuth from '../../../hooks/useAuth';\r\nimport useIsMountedRef from '../../../hooks/useIsMountedRef';\r\n// components\r\nimport Iconify from '../../../components/Iconify';\r\nimport { FormProvider, RHFTextField, RHFCheckbox } from '../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nexport default function LoginForm() {\r\n  const { login } = useAuth();\r\n\r\n  const isMountedRef = useIsMountedRef();\r\n\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const LoginSchema = Yup.object().shape({\r\n    email: Yup.string().email('Email must be a valid email address').required('Email is required'),\r\n    password: Yup.string().required('Password is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    email: 'demo@minimals.cc',\r\n    password: 'demo1234',\r\n    remember: true,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(LoginSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    reset,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    console.log('data 9990', data);\r\n\r\n    try {\r\n      await login(data.email, data.password);\r\n    } catch (error) {\r\n      console.error(error);\r\n      reset();\r\n      if (isMountedRef.current) {\r\n        setError('afterSubmit', 'Lỗi rồi!');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        {errors.afterSubmit && <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>}\r\n\r\n        <RHFTextField name=\"email\" label=\"Email address\" />\r\n\r\n        <RHFTextField\r\n          name=\"password\"\r\n          label=\"Password\"\r\n          type={showPassword ? 'text' : 'password'}\r\n          InputProps={{\r\n            endAdornment: (\r\n              <InputAdornment position=\"end\">\r\n                <IconButton onClick={() => setShowPassword(!showPassword)} edge=\"end\">\r\n                  <Iconify icon={showPassword ? 'eva:eye-fill' : 'eva:eye-off-fill'} />\r\n                </IconButton>\r\n              </InputAdornment>\r\n            ),\r\n          }}\r\n        />\r\n      </Stack>\r\n\r\n      <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\" sx={{ my: 2 }}>\r\n        <RHFCheckbox name=\"remember\" label=\"Remember me\" />\r\n        <Link component={RouterLink} variant=\"subtitle2\" to={PATH_AUTH.resetPassword}>\r\n          Forgot password?\r\n        </Link>\r\n      </Stack>\r\n\r\n      <LoadingButton fullWidth size=\"large\" type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n        Login\r\n      </LoadingButton>\r\n    </FormProvider>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}