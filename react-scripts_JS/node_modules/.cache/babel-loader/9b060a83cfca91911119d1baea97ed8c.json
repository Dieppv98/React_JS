{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\sections\\\\@dashboard\\\\e-commerce\\\\checkout\\\\CheckoutNewAddressForm.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup'; // form\n\nimport { useForm } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup'; // @mui\n\nimport { Box, Stack, Dialog, Button, Divider, DialogTitle, DialogContent, DialogActions } from '@mui/material';\nimport { LoadingButton } from '@mui/lab'; // _mock\n\nimport { countries } from '../../../../_mock';\nimport { FormProvider, RHFCheckbox, RHFSelect, RHFTextField, RHFRadioGroup } from '../../../../components/hook-form'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nCheckoutNewAddressForm.propTypes = {\n  open: PropTypes.bool,\n  onClose: PropTypes.func,\n  onNextStep: PropTypes.func,\n  onCreateBilling: PropTypes.func\n};\nexport default function CheckoutNewAddressForm(_ref) {\n  _s();\n\n  let {\n    open,\n    onClose,\n    onNextStep,\n    onCreateBilling\n  } = _ref;\n  const NewAddressSchema = Yup.object().shape({\n    receiver: Yup.string().required('Fullname is required'),\n    phone: Yup.string().required('Phone is required'),\n    address: Yup.string().required('Address is required'),\n    city: Yup.string().required('City is required'),\n    state: Yup.string().required('State is required')\n  });\n  const defaultValues = {\n    addressType: 'Home',\n    receiver: '',\n    phone: '',\n    address: '',\n    city: '',\n    state: '',\n    country: countries[0].label,\n    zipcode: '',\n    isDefault: true\n  };\n  const methods = useForm({\n    resolver: yupResolver(NewAddressSchema),\n    defaultValues\n  });\n  const {\n    handleSubmit,\n    formState: {\n      isSubmitting\n    }\n  } = methods;\n\n  const onSubmit = async data => {\n    try {\n      onNextStep();\n      onCreateBilling({\n        receiver: data.receiver,\n        phone: data.phone,\n        fullAddress: `${data.address}, ${data.city}, ${data.state}, ${data.country}, ${data.zipcode}`,\n        addressType: data.addressType,\n        isDefault: data.isDefault\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    fullWidth: true,\n    maxWidth: \"sm\",\n    open: open,\n    onClose: onClose,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Add new address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FormProvider, {\n      methods: methods,\n      onSubmit: handleSubmit(onSubmit),\n      children: [/*#__PURE__*/_jsxDEV(DialogContent, {\n        children: /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 3,\n          children: [/*#__PURE__*/_jsxDEV(RHFRadioGroup, {\n            name: \"addressType\",\n            options: ['Home', 'Office']\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'grid',\n              rowGap: 3,\n              columnGap: 2,\n              gridTemplateColumns: {\n                xs: 'repeat(1, 1fr)',\n                sm: 'repeat(2, 1fr)'\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"receiver\",\n              label: \"Full Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"phone\",\n              label: \"Phone Number\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n            name: \"address\",\n            label: \"Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            sx: {\n              display: 'grid',\n              rowGap: 3,\n              columnGap: 2,\n              gridTemplateColumns: {\n                xs: 'repeat(1, 1fr)',\n                sm: 'repeat(3, 1fr)'\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"city\",\n              label: \"Town / City\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"state\",\n              label: \"State\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(RHFTextField, {\n              name: \"zipcode\",\n              label: \"Zip / Postal Code\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RHFSelect, {\n            name: \"country\",\n            label: \"Country\",\n            children: countries.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option.label,\n              children: option.label\n            }, option.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RHFCheckbox, {\n            name: \"isDefault\",\n            label: \"Use this address as default.\",\n            sx: {\n              mt: 3\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(LoadingButton, {\n          type: \"submit\",\n          variant: \"contained\",\n          loading: isSubmitting,\n          children: \"Deliver to this Address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          color: \"inherit\",\n          variant: \"outlined\",\n          onClick: onClose,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CheckoutNewAddressForm, \"cLnp+zYVfnD49CnXGGXF3NvR6q8=\", false, function () {\n  return [useForm];\n});\n\n_c = CheckoutNewAddressForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckoutNewAddressForm\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/sections/@dashboard/e-commerce/checkout/CheckoutNewAddressForm.js"],"names":["PropTypes","Yup","useForm","yupResolver","Box","Stack","Dialog","Button","Divider","DialogTitle","DialogContent","DialogActions","LoadingButton","countries","FormProvider","RHFCheckbox","RHFSelect","RHFTextField","RHFRadioGroup","CheckoutNewAddressForm","propTypes","open","bool","onClose","func","onNextStep","onCreateBilling","NewAddressSchema","object","shape","receiver","string","required","phone","address","city","state","defaultValues","addressType","country","label","zipcode","isDefault","methods","resolver","handleSubmit","formState","isSubmitting","onSubmit","data","fullAddress","error","console","display","rowGap","columnGap","gridTemplateColumns","xs","sm","map","option","code","mt"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,YAAtB;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB,C,CACA;;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,WAAT,QAA4B,yBAA5B,C,CACA;;AACA,SAASC,GAAT,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8CC,WAA9C,EAA2DC,aAA3D,EAA0EC,aAA1E,QAA+F,eAA/F;AACA,SAASC,aAAT,QAA8B,UAA9B,C,CACA;;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA,SAASC,YAAT,EAAuBC,WAAvB,EAAoCC,SAApC,EAA+CC,YAA/C,EAA6DC,aAA7D,QAAkF,kCAAlF,C,CAEA;;;AAEAC,sBAAsB,CAACC,SAAvB,GAAmC;AACjCC,EAAAA,IAAI,EAAErB,SAAS,CAACsB,IADiB;AAEjCC,EAAAA,OAAO,EAAEvB,SAAS,CAACwB,IAFc;AAGjCC,EAAAA,UAAU,EAAEzB,SAAS,CAACwB,IAHW;AAIjCE,EAAAA,eAAe,EAAE1B,SAAS,CAACwB;AAJM,CAAnC;AAOA,eAAe,SAASL,sBAAT,OAAgF;AAAA;;AAAA,MAAhD;AAAEE,IAAAA,IAAF;AAAQE,IAAAA,OAAR;AAAiBE,IAAAA,UAAjB;AAA6BC,IAAAA;AAA7B,GAAgD;AAC7F,QAAMC,gBAAgB,GAAG1B,GAAG,CAAC2B,MAAJ,GAAaC,KAAb,CAAmB;AAC1CC,IAAAA,QAAQ,EAAE7B,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,CAAsB,sBAAtB,CADgC;AAE1CC,IAAAA,KAAK,EAAEhC,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB,CAFmC;AAG1CE,IAAAA,OAAO,EAAEjC,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,CAAsB,qBAAtB,CAHiC;AAI1CG,IAAAA,IAAI,EAAElC,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,CAAsB,kBAAtB,CAJoC;AAK1CI,IAAAA,KAAK,EAAEnC,GAAG,CAAC8B,MAAJ,GAAaC,QAAb,CAAsB,mBAAtB;AALmC,GAAnB,CAAzB;AAQA,QAAMK,aAAa,GAAG;AACpBC,IAAAA,WAAW,EAAE,MADO;AAEpBR,IAAAA,QAAQ,EAAE,EAFU;AAGpBG,IAAAA,KAAK,EAAE,EAHa;AAIpBC,IAAAA,OAAO,EAAE,EAJW;AAKpBC,IAAAA,IAAI,EAAE,EALc;AAMpBC,IAAAA,KAAK,EAAE,EANa;AAOpBG,IAAAA,OAAO,EAAE1B,SAAS,CAAC,CAAD,CAAT,CAAa2B,KAPF;AAQpBC,IAAAA,OAAO,EAAE,EARW;AASpBC,IAAAA,SAAS,EAAE;AATS,GAAtB;AAYA,QAAMC,OAAO,GAAGzC,OAAO,CAAC;AACtB0C,IAAAA,QAAQ,EAAEzC,WAAW,CAACwB,gBAAD,CADC;AAEtBU,IAAAA;AAFsB,GAAD,CAAvB;AAKA,QAAM;AACJQ,IAAAA,YADI;AAEJC,IAAAA,SAAS,EAAE;AAAEC,MAAAA;AAAF;AAFP,MAGFJ,OAHJ;;AAKA,QAAMK,QAAQ,GAAG,MAAOC,IAAP,IAAgB;AAC/B,QAAI;AACFxB,MAAAA,UAAU;AACVC,MAAAA,eAAe,CAAC;AACdI,QAAAA,QAAQ,EAAEmB,IAAI,CAACnB,QADD;AAEdG,QAAAA,KAAK,EAAEgB,IAAI,CAAChB,KAFE;AAGdiB,QAAAA,WAAW,EAAG,GAAED,IAAI,CAACf,OAAQ,KAAIe,IAAI,CAACd,IAAK,KAAIc,IAAI,CAACb,KAAM,KAAIa,IAAI,CAACV,OAAQ,KAAIU,IAAI,CAACR,OAAQ,EAH9E;AAIdH,QAAAA,WAAW,EAAEW,IAAI,CAACX,WAJJ;AAKdI,QAAAA,SAAS,EAAEO,IAAI,CAACP;AALF,OAAD,CAAf;AAOD,KATD,CASE,OAAOS,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD;AACF,GAbD;;AAeA,sBACE,QAAC,MAAD;AAAQ,IAAA,SAAS,MAAjB;AAAkB,IAAA,QAAQ,EAAC,IAA3B;AAAgC,IAAA,IAAI,EAAE9B,IAAtC;AAA4C,IAAA,OAAO,EAAEE,OAArD;AAAA,4BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,YAAD;AAAc,MAAA,OAAO,EAAEoB,OAAvB;AAAgC,MAAA,QAAQ,EAAEE,YAAY,CAACG,QAAD,CAAtD;AAAA,8BACE,QAAC,aAAD;AAAA,+BACE,QAAC,KAAD;AAAO,UAAA,OAAO,EAAE,CAAhB;AAAA,kCACE,QAAC,aAAD;AAAe,YAAA,IAAI,EAAC,aAApB;AAAkC,YAAA,OAAO,EAAE,CAAC,MAAD,EAAS,QAAT;AAA3C;AAAA;AAAA;AAAA;AAAA,kBADF,eAGE,QAAC,GAAD;AACE,YAAA,EAAE,EAAE;AACFK,cAAAA,OAAO,EAAE,MADP;AAEFC,cAAAA,MAAM,EAAE,CAFN;AAGFC,cAAAA,SAAS,EAAE,CAHT;AAIFC,cAAAA,mBAAmB,EAAE;AAAEC,gBAAAA,EAAE,EAAE,gBAAN;AAAwBC,gBAAAA,EAAE,EAAE;AAA5B;AAJnB,aADN;AAAA,oCAQE,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,UAAnB;AAA8B,cAAA,KAAK,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,oBARF,eASE,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,OAAnB;AAA2B,cAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAeE,QAAC,YAAD;AAAc,YAAA,IAAI,EAAC,SAAnB;AAA6B,YAAA,KAAK,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,kBAfF,eAiBE,QAAC,GAAD;AACE,YAAA,EAAE,EAAE;AACFL,cAAAA,OAAO,EAAE,MADP;AAEFC,cAAAA,MAAM,EAAE,CAFN;AAGFC,cAAAA,SAAS,EAAE,CAHT;AAIFC,cAAAA,mBAAmB,EAAE;AAAEC,gBAAAA,EAAE,EAAE,gBAAN;AAAwBC,gBAAAA,EAAE,EAAE;AAA5B;AAJnB,aADN;AAAA,oCAQE,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,MAAnB;AAA0B,cAAA,KAAK,EAAC;AAAhC;AAAA;AAAA;AAAA;AAAA,oBARF,eASE,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,OAAnB;AAA2B,cAAA,KAAK,EAAC;AAAjC;AAAA;AAAA;AAAA;AAAA,oBATF,eAUE,QAAC,YAAD;AAAc,cAAA,IAAI,EAAC,SAAnB;AAA6B,cAAA,KAAK,EAAC;AAAnC;AAAA;AAAA;AAAA;AAAA,oBAVF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAjBF,eA8BE,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,SAAhB;AAA0B,YAAA,KAAK,EAAC,SAAhC;AAAA,sBACG7C,SAAS,CAAC8C,GAAV,CAAeC,MAAD,iBACb;AAA0B,cAAA,KAAK,EAAEA,MAAM,CAACpB,KAAxC;AAAA,wBACGoB,MAAM,CAACpB;AADV,eAAaoB,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA,oBADD;AADH;AAAA;AAAA;AAAA;AAAA,kBA9BF,eAsCE,QAAC,WAAD;AAAa,YAAA,IAAI,EAAC,WAAlB;AAA8B,YAAA,KAAK,EAAC,8BAApC;AAAmE,YAAA,EAAE,EAAE;AAAEC,cAAAA,EAAE,EAAE;AAAN;AAAvE;AAAA;AAAA;AAAA;AAAA,kBAtCF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cADF,eA4CE,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cA5CF,eA8CE,QAAC,aAAD;AAAA,gCACE,QAAC,aAAD;AAAe,UAAA,IAAI,EAAC,QAApB;AAA6B,UAAA,OAAO,EAAC,WAArC;AAAiD,UAAA,OAAO,EAAEf,YAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,MAAD;AAAQ,UAAA,KAAK,EAAC,SAAd;AAAwB,UAAA,OAAO,EAAC,UAAhC;AAA2C,UAAA,OAAO,EAAExB,OAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF;AAAA;AAAA;AAAA;AAAA;AAAA,cA9CF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6DD;;GA3GuBJ,sB;UAqBNjB,O;;;KArBMiB,sB","sourcesContent":["import PropTypes from 'prop-types';\r\nimport * as Yup from 'yup';\r\n// form\r\nimport { useForm } from 'react-hook-form';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\n// @mui\r\nimport { Box, Stack, Dialog, Button, Divider, DialogTitle, DialogContent, DialogActions } from '@mui/material';\r\nimport { LoadingButton } from '@mui/lab';\r\n// _mock\r\nimport { countries } from '../../../../_mock';\r\nimport { FormProvider, RHFCheckbox, RHFSelect, RHFTextField, RHFRadioGroup } from '../../../../components/hook-form';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nCheckoutNewAddressForm.propTypes = {\r\n  open: PropTypes.bool,\r\n  onClose: PropTypes.func,\r\n  onNextStep: PropTypes.func,\r\n  onCreateBilling: PropTypes.func,\r\n};\r\n\r\nexport default function CheckoutNewAddressForm({ open, onClose, onNextStep, onCreateBilling }) {\r\n  const NewAddressSchema = Yup.object().shape({\r\n    receiver: Yup.string().required('Fullname is required'),\r\n    phone: Yup.string().required('Phone is required'),\r\n    address: Yup.string().required('Address is required'),\r\n    city: Yup.string().required('City is required'),\r\n    state: Yup.string().required('State is required'),\r\n  });\r\n\r\n  const defaultValues = {\r\n    addressType: 'Home',\r\n    receiver: '',\r\n    phone: '',\r\n    address: '',\r\n    city: '',\r\n    state: '',\r\n    country: countries[0].label,\r\n    zipcode: '',\r\n    isDefault: true,\r\n  };\r\n\r\n  const methods = useForm({\r\n    resolver: yupResolver(NewAddressSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  const {\r\n    handleSubmit,\r\n    formState: { isSubmitting },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      onNextStep();\r\n      onCreateBilling({\r\n        receiver: data.receiver,\r\n        phone: data.phone,\r\n        fullAddress: `${data.address}, ${data.city}, ${data.state}, ${data.country}, ${data.zipcode}`,\r\n        addressType: data.addressType,\r\n        isDefault: data.isDefault,\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog fullWidth maxWidth=\"sm\" open={open} onClose={onClose}>\r\n      <DialogTitle>Add new address</DialogTitle>\r\n\r\n      <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n        <DialogContent>\r\n          <Stack spacing={3}>\r\n            <RHFRadioGroup name=\"addressType\" options={['Home', 'Office']} />\r\n\r\n            <Box\r\n              sx={{\r\n                display: 'grid',\r\n                rowGap: 3,\r\n                columnGap: 2,\r\n                gridTemplateColumns: { xs: 'repeat(1, 1fr)', sm: 'repeat(2, 1fr)' },\r\n              }}\r\n            >\r\n              <RHFTextField name=\"receiver\" label=\"Full Name\" />\r\n              <RHFTextField name=\"phone\" label=\"Phone Number\" />\r\n            </Box>\r\n\r\n            <RHFTextField name=\"address\" label=\"Address\" />\r\n\r\n            <Box\r\n              sx={{\r\n                display: 'grid',\r\n                rowGap: 3,\r\n                columnGap: 2,\r\n                gridTemplateColumns: { xs: 'repeat(1, 1fr)', sm: 'repeat(3, 1fr)' },\r\n              }}\r\n            >\r\n              <RHFTextField name=\"city\" label=\"Town / City\" />\r\n              <RHFTextField name=\"state\" label=\"State\" />\r\n              <RHFTextField name=\"zipcode\" label=\"Zip / Postal Code\" />\r\n            </Box>\r\n\r\n            <RHFSelect name=\"country\" label=\"Country\">\r\n              {countries.map((option) => (\r\n                <option key={option.code} value={option.label}>\r\n                  {option.label}\r\n                </option>\r\n              ))}\r\n            </RHFSelect>\r\n\r\n            <RHFCheckbox name=\"isDefault\" label=\"Use this address as default.\" sx={{ mt: 3 }} />\r\n          </Stack>\r\n        </DialogContent>\r\n\r\n        <Divider />\r\n\r\n        <DialogActions>\r\n          <LoadingButton type=\"submit\" variant=\"contained\" loading={isSubmitting}>\r\n            Deliver to this Address\r\n          </LoadingButton>\r\n          <Button color=\"inherit\" variant=\"outlined\" onClick={onClose}>\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </FormProvider>\r\n    </Dialog>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}