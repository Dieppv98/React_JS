{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_JS\\\\React_JS\\\\react-scripts_JS\\\\src\\\\components\\\\hook-form\\\\RHFCheckbox.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport PropTypes from 'prop-types'; // form\n\nimport { useFormContext, Controller } from 'react-hook-form'; // @mui\n\nimport { Checkbox, FormGroup, FormControlLabel } from '@mui/material'; // ----------------------------------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nRHFCheckbox.propTypes = {\n  name: PropTypes.string\n};\nexport function RHFCheckbox(_ref) {\n  _s();\n\n  let {\n    name,\n    ...other\n  } = _ref;\n  const {\n    control\n  } = useFormContext();\n  return /*#__PURE__*/_jsxDEV(FormControlLabel, {\n    control: /*#__PURE__*/_jsxDEV(Controller, {\n      name: name,\n      control: control,\n      render: _ref2 => {\n        let {\n          field\n        } = _ref2;\n        return /*#__PURE__*/_jsxDEV(Checkbox, { ...field,\n          checked: field.value\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 34\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }, this),\n    ...other\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n} // ----------------------------------------------------------------------\n\n_s(RHFCheckbox, \"zyAxkz+Wq3InUdCKNlVVi99oElQ=\", false, function () {\n  return [useFormContext];\n});\n\n_c = RHFCheckbox;\nRHFMultiCheckbox.propTypes = {\n  name: PropTypes.string,\n  options: PropTypes.arrayOf(PropTypes.string)\n};\nexport function RHFMultiCheckbox(_ref3) {\n  _s2();\n\n  let {\n    name,\n    options,\n    ...other\n  } = _ref3;\n  const {\n    control\n  } = useFormContext();\n  return /*#__PURE__*/_jsxDEV(Controller, {\n    name: name,\n    control: control,\n    render: _ref4 => {\n      let {\n        field\n      } = _ref4;\n\n      const onSelected = option => field.value.includes(option) ? field.value.filter(value => value !== option) : [...field.value, option];\n\n      return /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: options.map(option => /*#__PURE__*/_jsxDEV(FormControlLabel, {\n          control: /*#__PURE__*/_jsxDEV(Checkbox, {\n            checked: field.value.includes(option),\n            onChange: () => field.onChange(onSelected(option))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 19\n          }, this),\n          label: option,\n          ...other\n        }, option, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(RHFMultiCheckbox, \"zyAxkz+Wq3InUdCKNlVVi99oElQ=\", false, function () {\n  return [useFormContext];\n});\n\n_c2 = RHFMultiCheckbox;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"RHFCheckbox\");\n$RefreshReg$(_c2, \"RHFMultiCheckbox\");","map":{"version":3,"sources":["D:/React_JS/React_JS/react-scripts_JS/src/components/hook-form/RHFCheckbox.js"],"names":["PropTypes","useFormContext","Controller","Checkbox","FormGroup","FormControlLabel","RHFCheckbox","propTypes","name","string","other","control","field","value","RHFMultiCheckbox","options","arrayOf","onSelected","option","includes","filter","map","onChange"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,YAAtB,C,CACA;;AACA,SAASC,cAAT,EAAyBC,UAAzB,QAA2C,iBAA3C,C,CACA;;AACA,SAASC,QAAT,EAAmBC,SAAnB,EAA8BC,gBAA9B,QAAsD,eAAtD,C,CAEA;;;AAEAC,WAAW,CAACC,SAAZ,GAAwB;AACtBC,EAAAA,IAAI,EAAER,SAAS,CAACS;AADM,CAAxB;AAIA,OAAO,SAASH,WAAT,OAAyC;AAAA;;AAAA,MAApB;AAAEE,IAAAA,IAAF;AAAQ,OAAGE;AAAX,GAAoB;AAC9C,QAAM;AAAEC,IAAAA;AAAF,MAAcV,cAAc,EAAlC;AAEA,sBACE,QAAC,gBAAD;AACE,IAAA,OAAO,eACL,QAAC,UAAD;AACE,MAAA,IAAI,EAAEO,IADR;AAEE,MAAA,OAAO,EAAEG,OAFX;AAGE,MAAA,MAAM,EAAE;AAAA,YAAC;AAAEC,UAAAA;AAAF,SAAD;AAAA,4BAAe,QAAC,QAAD,OAAcA,KAAd;AAAqB,UAAA,OAAO,EAAEA,KAAK,CAACC;AAApC;AAAA;AAAA;AAAA;AAAA,gBAAf;AAAA;AAHV;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,OAQMH;AARN;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,C,CAED;;GAjBgBJ,W;UACML,c;;;KADNK,W;AAmBhBQ,gBAAgB,CAACP,SAAjB,GAA6B;AAC3BC,EAAAA,IAAI,EAAER,SAAS,CAACS,MADW;AAE3BM,EAAAA,OAAO,EAAEf,SAAS,CAACgB,OAAV,CAAkBhB,SAAS,CAACS,MAA5B;AAFkB,CAA7B;AAKA,OAAO,SAASK,gBAAT,QAAuD;AAAA;;AAAA,MAA7B;AAAEN,IAAAA,IAAF;AAAQO,IAAAA,OAAR;AAAiB,OAAGL;AAApB,GAA6B;AAC5D,QAAM;AAAEC,IAAAA;AAAF,MAAcV,cAAc,EAAlC;AAEA,sBACE,QAAC,UAAD;AACE,IAAA,IAAI,EAAEO,IADR;AAEE,IAAA,OAAO,EAAEG,OAFX;AAGE,IAAA,MAAM,EAAE,SAAe;AAAA,UAAd;AAAEC,QAAAA;AAAF,OAAc;;AACrB,YAAMK,UAAU,GAAIC,MAAD,IACjBN,KAAK,CAACC,KAAN,CAAYM,QAAZ,CAAqBD,MAArB,IAA+BN,KAAK,CAACC,KAAN,CAAYO,MAAZ,CAAoBP,KAAD,IAAWA,KAAK,KAAKK,MAAxC,CAA/B,GAAiF,CAAC,GAAGN,KAAK,CAACC,KAAV,EAAiBK,MAAjB,CADnF;;AAGA,0BACE,QAAC,SAAD;AAAA,kBACGH,OAAO,CAACM,GAAR,CAAaH,MAAD,iBACX,QAAC,gBAAD;AAEE,UAAA,OAAO,eACL,QAAC,QAAD;AACE,YAAA,OAAO,EAAEN,KAAK,CAACC,KAAN,CAAYM,QAAZ,CAAqBD,MAArB,CADX;AAEE,YAAA,QAAQ,EAAE,MAAMN,KAAK,CAACU,QAAN,CAAeL,UAAU,CAACC,MAAD,CAAzB;AAFlB;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAQE,UAAA,KAAK,EAAEA,MART;AAAA,aASMR;AATN,WACOQ,MADP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF;AAiBD;AAxBH;AAAA;AAAA;AAAA;AAAA,UADF;AA4BD;;IA/BeJ,gB;UACMb,c;;;MADNa,gB","sourcesContent":["import PropTypes from 'prop-types';\r\n// form\r\nimport { useFormContext, Controller } from 'react-hook-form';\r\n// @mui\r\nimport { Checkbox, FormGroup, FormControlLabel } from '@mui/material';\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nRHFCheckbox.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nexport function RHFCheckbox({ name, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <FormControlLabel\r\n      control={\r\n        <Controller\r\n          name={name}\r\n          control={control}\r\n          render={({ field }) => <Checkbox {...field} checked={field.value} />}\r\n        />\r\n      }\r\n      {...other}\r\n    />\r\n  );\r\n}\r\n\r\n// ----------------------------------------------------------------------\r\n\r\nRHFMultiCheckbox.propTypes = {\r\n  name: PropTypes.string,\r\n  options: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nexport function RHFMultiCheckbox({ name, options, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field }) => {\r\n        const onSelected = (option) =>\r\n          field.value.includes(option) ? field.value.filter((value) => value !== option) : [...field.value, option];\r\n\r\n        return (\r\n          <FormGroup>\r\n            {options.map((option) => (\r\n              <FormControlLabel\r\n                key={option}\r\n                control={\r\n                  <Checkbox\r\n                    checked={field.value.includes(option)}\r\n                    onChange={() => field.onChange(onSelected(option))}\r\n                  />\r\n                }\r\n                label={option}\r\n                {...other}\r\n              />\r\n            ))}\r\n          </FormGroup>\r\n        );\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}