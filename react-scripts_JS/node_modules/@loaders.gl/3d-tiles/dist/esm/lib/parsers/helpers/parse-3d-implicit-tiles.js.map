{"version":3,"sources":["../../../../../src/lib/parsers/helpers/parse-3d-implicit-tiles.ts"],"names":["Tile3DSubtreeLoader","load","QUADTREE_DEVISION_COUNT","OCTREE_DEVISION_COUNT","SUBDIVISION_COUNT_MAP","QUADTREE","OCTREE","parseImplicitTiles","subtree","options","parentData","mortonIndex","x","y","z","childIndex","level","globalData","subdivisionScheme","subtreeLevels","maximumLevel","contentUrlTemplate","subtreesUriTemplate","basePath","tile","children","lodMetricValue","contentUrl","childrenPerTile","childX","childY","childZ","levelOffset","childTileMortonIndex","concatBits","tileAvailabilityIndex","childTileX","childTileY","childTileZ","isChildSubtreeAvailable","getAvailabilityResult","childSubtreeAvailability","lev","subtreePath","childSubtreeUrl","replaceContentUrlTemplate","childSubtree","isTileAvailable","tileAvailability","isContentAvailable","contentAvailability","childTileLevel","pData","index","currentTile","length","globalLevel","formattedTile","formatTileData","push","availabilityData","Boolean","constant","explicitBitstream","getBooleanValueFromBitstream","refine","getRefine","lodMetricType","getTileType","rootLodMetricValue","uri","replace","content","id","type","first","second","parseInt","toString","templateUrl","mapUrl","generateMapUrl","matched","items","key","availabilityIndex","availabilityBuffer","byteIndex","Math","floor","bitIndex","bitValue"],"mappings":"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","sourcesContent":["import type {Availability, Subtree} from '../../../types';\nimport {Tile3DSubtreeLoader} from '../../../tile-3d-subtree-loader';\nimport {load} from '@loaders.gl/core';\n\nconst QUADTREE_DEVISION_COUNT = 4;\nconst OCTREE_DEVISION_COUNT = 8;\n\nconst SUBDIVISION_COUNT_MAP = {\n  QUADTREE: QUADTREE_DEVISION_COUNT,\n  OCTREE: OCTREE_DEVISION_COUNT\n};\n\n/**\n * Recursively parse implicit tiles tree\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/main/extensions/3DTILES_implicit_tiling\n * TODO Check out do we able to use Tile3D class as return type here.\n * @param subtree\n * @param lodMetricValue\n * @param options\n * @param parentData\n * @param childIndex\n * @param level\n * @param globalData\n */\n// eslint-disable-next-line max-params\n// eslint-disable-next-line max-statements\nexport async function parseImplicitTiles(\n  subtree: Subtree,\n  options: any,\n  parentData: {mortonIndex: number; x: number; y: number; z: number} = {\n    mortonIndex: 0,\n    x: 0,\n    y: 0,\n    z: 0\n  },\n  childIndex: number = 0,\n  level: number = 0,\n  globalData: {level: number; mortonIndex: number; x: number; y: number; z: number} = {\n    level: 0,\n    mortonIndex: 0,\n    x: 0,\n    y: 0,\n    z: 0\n  }\n) {\n  const {\n    subdivisionScheme,\n    subtreeLevels,\n    maximumLevel,\n    contentUrlTemplate,\n    subtreesUriTemplate,\n    basePath\n  } = options;\n\n  const tile = {children: [], lodMetricValue: 0, contentUrl: ''};\n\n  const childrenPerTile = SUBDIVISION_COUNT_MAP[subdivisionScheme];\n\n  const childX = childIndex & 0b01;\n  const childY = (childIndex >> 1) & 0b01;\n  const childZ = (childIndex >> 2) & 0b01;\n\n  const levelOffset = (childrenPerTile ** level - 1) / (childrenPerTile - 1);\n  let childTileMortonIndex = concatBits(parentData.mortonIndex, childIndex);\n  let tileAvailabilityIndex = levelOffset + childTileMortonIndex;\n\n  // Local tile coordinates\n  let childTileX = concatBits(parentData.x, childX);\n  let childTileY = concatBits(parentData.y, childY);\n  let childTileZ = concatBits(parentData.z, childZ);\n\n  // TODO Remove after real implicit tileset will be tested.\n  // Degug data\n  // tile.level = level + globalData.level;\n  // tile.x = concatBits(globalData.x, childTileX);\n  // tile.y = concatBits(globalData.y, childTileY);\n  // tile.z = concatBits(globalData.z, childTileZ);\n  // tile.mortonIndex = childTileMortonIndex;\n  // End of debug data\n\n  let isChildSubtreeAvailable = false;\n\n  if (level + 1 > subtreeLevels) {\n    isChildSubtreeAvailable = getAvailabilityResult(\n      subtree.childSubtreeAvailability,\n      childTileMortonIndex\n    );\n  }\n\n  const x = concatBits(globalData.x, childTileX);\n  const y = concatBits(globalData.y, childTileY);\n  const z = concatBits(globalData.z, childTileZ);\n  const lev = level + globalData.level;\n\n  if (isChildSubtreeAvailable) {\n    const subtreePath = `${basePath}/${subtreesUriTemplate}`;\n    const childSubtreeUrl = replaceContentUrlTemplate(subtreePath, lev, x, y, z);\n    const childSubtree = await load(childSubtreeUrl, Tile3DSubtreeLoader);\n\n    subtree = childSubtree;\n\n    globalData.mortonIndex = childTileMortonIndex;\n    globalData.x = childTileX;\n    globalData.y = childTileY;\n    globalData.z = childTileZ;\n    globalData.level = level;\n\n    childTileMortonIndex = 0;\n    tileAvailabilityIndex = 0;\n    childTileX = 0;\n    childTileY = 0;\n    childTileZ = 0;\n    level = 0;\n  }\n\n  const isTileAvailable = getAvailabilityResult(subtree.tileAvailability, tileAvailabilityIndex);\n\n  if (!isTileAvailable || level > maximumLevel) {\n    return tile;\n  }\n\n  const isContentAvailable = getAvailabilityResult(\n    subtree.contentAvailability,\n    tileAvailabilityIndex\n  );\n\n  if (isContentAvailable) {\n    tile.contentUrl = replaceContentUrlTemplate(contentUrlTemplate, lev, x, y, z);\n  }\n\n  const childTileLevel = level + 1;\n  const pData = {mortonIndex: childTileMortonIndex, x: childTileX, y: childTileY, z: childTileZ};\n\n  for (let index = 0; index < childrenPerTile; index++) {\n    const currentTile = await parseImplicitTiles(\n      subtree,\n      options,\n      pData,\n      index,\n      childTileLevel,\n      globalData\n    );\n\n    if (currentTile.contentUrl || currentTile.children.length) {\n      const globalLevel = lev + 1;\n      const formattedTile = formatTileData(currentTile, globalLevel, options);\n      // @ts-ignore\n      tile.children.push(formattedTile);\n    }\n  }\n\n  return tile;\n}\n\nfunction getAvailabilityResult(availabilityData: Availability, index: number): boolean {\n  if ('constant' in availabilityData) {\n    return Boolean(availabilityData.constant);\n  }\n\n  if (availabilityData.explicitBitstream) {\n    return getBooleanValueFromBitstream(index, availabilityData.explicitBitstream);\n  }\n\n  return false;\n}\n\n/**\n * Do formatting of implicit tile data.\n * TODO Check out do we able to use Tile3D class as type here.\n * @param tile\n * @param lodMetricValue\n * @param options\n * @returns\n */\nfunction formatTileData(tile, level: number, options: any) {\n  const {basePath, refine, getRefine, lodMetricType, getTileType, rootLodMetricValue} = options;\n  const uri = tile.contentUrl && tile.contentUrl.replace(`${basePath}/`, '');\n  const lodMetricValue = rootLodMetricValue / 2 ** level;\n  // TODO handle bounding volume\n  return {\n    children: tile.children,\n    contentUrl: tile.contentUrl,\n    content: {uri},\n    id: tile.contentUrl,\n    refine: getRefine(refine),\n    type: getTileType(tile),\n    lodMetricType,\n    lodMetricValue\n    // Temp debug values. Remove when real implicit tileset will be tested.\n    // x: tile.x,\n    // y: tile.y,\n    // z: tile.z,\n    // level: tile.level\n  };\n}\n\n/**\n * Do binary concatenation\n * @param first\n * @param second\n */\nfunction concatBits(first: number, second: number): number {\n  return parseInt(first.toString(2) + second.toString(2), 2);\n}\n\n/**\n * Replace implicit tile content url with real coordinates.\n * @param templateUrl\n * @param level\n * @param x\n * @param y\n * @param z\n */\nexport function replaceContentUrlTemplate(\n  templateUrl: string,\n  level: number,\n  x: number,\n  y: number,\n  z: number\n): string {\n  const mapUrl = generateMapUrl({level, x, y, z});\n  return templateUrl.replace(/{level}|{x}|{y}|{z}/gi, (matched) => mapUrl[matched]);\n}\n\n/**\n * Get Map object for content url generation\n * @param items\n */\nfunction generateMapUrl(items: {[key: string]: number}): {[key: string]: string} {\n  const mapUrl = {};\n\n  for (const key in items) {\n    mapUrl[`{${key}}`] = items[key];\n  }\n  return mapUrl;\n}\n\n/**\n * Get boolean value from bistream by index\n * A boolean value is encoded as a single bit, either 0 (false) or 1 (true).\n * Multiple boolean values are packed tightly in the same buffer.\n * These buffers of tightly-packed bits are sometimes referred to as bitstreams.\n * Spec - https://github.com/CesiumGS/3d-tiles/tree/implicit-revisions/specification/Metadata#booleans\n * @param availabilitiIndex\n */\nfunction getBooleanValueFromBitstream(\n  availabilityIndex: number,\n  availabilityBuffer: Uint8Array\n): boolean {\n  const byteIndex = Math.floor(availabilityIndex / 8);\n  const bitIndex = availabilityIndex % 8;\n  const bitValue = (availabilityBuffer[byteIndex] >> bitIndex) & 1;\n\n  return bitValue === 1;\n}\n"],"file":"parse-3d-implicit-tiles.js"}