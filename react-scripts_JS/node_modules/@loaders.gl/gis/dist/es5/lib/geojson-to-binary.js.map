{"version":3,"sources":["../../../src/lib/geojson-to-binary.ts"],"names":["geojsonToBinary","features","options","firstPassData","firstPass","secondPass","coordLength","numericPropKeys","PositionDataType","Float32Array","TEST_EXPORTS","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","coordLengths","Set","propArrayTypes","feature","geometry","type","add","coordinates","length","point","coord","line","flatten","polygon","Error","properties","key","val","deduceArrayType","size","Math","max","Object","keys","filter","k","Array","GlobalFeatureIdsDataType","Uint32Array","Uint16Array","points","positions","globalFeatureIds","featureIds","numericProps","fields","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","object","propName","TypedArray","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","handlePoint","push","keepStringProperties","handleMultiPoint","handleLineString","handleMultiLineString","handlePolygon","handleMultiPolygon","makeAccessorObjects","coords","set","fillNumericProperties","fillCoords","nPositions","fill","ring","returnObj","value","geomType","numericProp","index","numericPropName","numericKeys","props","includes","array","startVertex","arrays","concat","x","constructor","Number","isFinite","Float64Array","fround"],"mappings":"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","sourcesContent":["import {Feature, GeoJsonProperties} from '@loaders.gl/schema';\nimport type {BinaryFeatures} from '@loaders.gl/schema';\n\nexport type GeojsonToBinaryOptions = {\n  coordLength?: number;\n  numericPropKeys?: string[];\n  PositionDataType?: Function;\n};\n\n/** Convert GeoJSON features to flat binary arrays */\nexport function geojsonToBinary(\n  features: Feature[],\n  options: GeojsonToBinaryOptions = {}\n): BinaryFeatures {\n  const firstPassData = firstPass(features);\n  return secondPass(features, firstPassData, {\n    coordLength: options.coordLength || firstPassData.coordLength,\n    numericPropKeys: options.numericPropKeys || firstPassData.numericPropKeys,\n    PositionDataType: options.PositionDataType || Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  firstPass,\n  secondPass\n};\n\ntype PropArrayConstructor = Float32ArrayConstructor | Float64ArrayConstructor | ArrayConstructor;\n\ntype FirstPassData = {\n  coordLength: number;\n  numericPropKeys: string[];\n  propArrayTypes: {[key: string]: PropArrayConstructor};\n\n  pointPositionsCount: number;\n  pointFeaturesCount: number;\n  linePositionsCount: number;\n  linePathsCount: number;\n  lineFeaturesCount: number;\n  polygonPositionsCount: number;\n  polygonObjectsCount: number;\n  polygonRingsCount: number;\n  polygonFeaturesCount: number;\n};\n\n/**\n *  Initial scan over GeoJSON features\n *  Counts number of coordinates of each geometry type and\n *  keeps track of the max coordinate dimensions\n */\n// eslint-disable-next-line complexity, max-statements\nfunction firstPass(features: Feature[]): FirstPassData {\n  // Counts the number of _positions_, so [x, y, z] counts as one\n  let pointPositionsCount = 0;\n  let pointFeaturesCount = 0;\n  let linePositionsCount = 0;\n  let linePathsCount = 0;\n  let lineFeaturesCount = 0;\n  let polygonPositionsCount = 0;\n  let polygonObjectsCount = 0;\n  let polygonRingsCount = 0;\n  let polygonFeaturesCount = 0;\n  const coordLengths = new Set<number>();\n  const propArrayTypes = {};\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    switch (geometry.type) {\n      case 'Point':\n        pointFeaturesCount++;\n        pointPositionsCount++;\n        coordLengths.add(geometry.coordinates.length);\n        break;\n      case 'MultiPoint':\n        pointFeaturesCount++;\n        pointPositionsCount += geometry.coordinates.length;\n        for (const point of geometry.coordinates) {\n          coordLengths.add(point.length);\n        }\n        break;\n      case 'LineString':\n        lineFeaturesCount++;\n        linePositionsCount += geometry.coordinates.length;\n        linePathsCount++;\n\n        for (const coord of geometry.coordinates) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiLineString':\n        lineFeaturesCount++;\n        for (const line of geometry.coordinates) {\n          linePositionsCount += line.length;\n          linePathsCount++;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of line) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      case 'Polygon':\n        polygonFeaturesCount++;\n        polygonObjectsCount++;\n        polygonRingsCount += geometry.coordinates.length;\n        polygonPositionsCount += flatten(geometry.coordinates).length;\n\n        for (const coord of flatten(geometry.coordinates)) {\n          coordLengths.add(coord.length);\n        }\n        break;\n      case 'MultiPolygon':\n        polygonFeaturesCount++;\n        for (const polygon of geometry.coordinates) {\n          polygonObjectsCount++;\n          polygonRingsCount += polygon.length;\n          polygonPositionsCount += flatten(polygon).length;\n\n          // eslint-disable-next-line max-depth\n          for (const coord of flatten(polygon)) {\n            coordLengths.add(coord.length);\n          }\n        }\n        break;\n      default:\n        throw new Error(`Unsupported geometry type: ${geometry.type}`);\n    }\n\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        const val = feature.properties[key];\n\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, Array is stored to prevent rechecking in the future\n        // Additionally, detects if 64 bit precision is required\n        propArrayTypes[key] = deduceArrayType(val, propArrayTypes[key]);\n      }\n    }\n  }\n\n  return {\n    coordLength: coordLengths.size > 0 ? Math.max(...coordLengths) : 2,\n\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount,\n\n    // Array of keys whose values are always numeric\n    numericPropKeys: Object.keys(propArrayTypes).filter((k) => propArrayTypes[k] !== Array),\n    propArrayTypes\n  };\n}\n\n/**\n * Second scan over GeoJSON features\n * Fills coordinates into pre-allocated typed arrays\n */\n// eslint-disable-next-line complexity\nfunction secondPass(\n  features,\n  firstPassData: FirstPassData,\n  options: Required<GeojsonToBinaryOptions>\n) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    propArrayTypes,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {coordLength, numericPropKeys, PositionDataType = Float32Array} = options;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points = {\n    // @ts-ignore Typescript doesn't like dynamic constructors\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: Array<any>(),\n    fields: Array<any>()\n  };\n  const lines = {\n    // @ts-ignore Typescript doesn't like dynamic constructors\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: Array<any>(),\n    fields: Array<any>()\n  };\n  const polygons = {\n    // @ts-ignore Typescript doesn't like dynamic constructors\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: Array<any>(),\n    fields: Array<any>()\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys || []) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      const TypedArray = propArrayTypes[propName];\n      object.numericProps[propName] = new TypedArray(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties: GeoJsonProperties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n        handlePoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'MultiPoint':\n        handleMultiPoint(geometry.coordinates, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n        handleLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'MultiLineString':\n        handleMultiLineString(geometry.coordinates, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n        handlePolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      case 'MultiPolygon':\n        handleMultiPolygon(geometry.coordinates, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n/** Fills Point coordinates into points object of arrays */\nfunction handlePoint(coords, points, indexMap, coordLength, properties) {\n  points.positions.set(coords, indexMap.pointPosition * coordLength);\n  points.globalFeatureIds[indexMap.pointPosition] = indexMap.feature;\n  points.featureIds[indexMap.pointPosition] = indexMap.pointFeature;\n\n  fillNumericProperties(points, properties, indexMap.pointPosition, 1);\n  indexMap.pointPosition++;\n}\n\n/** Fills MultiPoint coordinates into points object of arrays */\nfunction handleMultiPoint(coords, points, indexMap, coordLength, properties) {\n  for (const point of coords) {\n    handlePoint(point, points, indexMap, coordLength, properties);\n  }\n}\n\n/** Fills LineString coordinates into lines object of arrays */\nfunction handleLineString(coords, lines, indexMap, coordLength, properties) {\n  lines.pathIndices[indexMap.linePath] = indexMap.linePosition;\n  indexMap.linePath++;\n\n  fillCoords(lines.positions, coords, indexMap.linePosition, coordLength);\n\n  const nPositions = coords.length;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.feature),\n    indexMap.linePosition\n  );\n  lines.featureIds.set(\n    new Uint32Array(nPositions).fill(indexMap.lineFeature),\n    indexMap.linePosition\n  );\n  indexMap.linePosition += nPositions;\n}\n\n/** Fills MultiLineString coordinates into lines object of arrays */\nfunction handleMultiLineString(coords, lines, indexMap, coordLength, properties) {\n  for (const line of coords) {\n    handleLineString(line, lines, indexMap, coordLength, properties);\n  }\n}\n\n/** Fills Polygon coordinates into polygons object of arrays */\nfunction handlePolygon(coords, polygons, indexMap, coordLength, properties) {\n  polygons.polygonIndices[indexMap.polygonObject] = indexMap.polygonPosition;\n  indexMap.polygonObject++;\n\n  for (const ring of coords) {\n    polygons.primitivePolygonIndices[indexMap.polygonRing] = indexMap.polygonPosition;\n    indexMap.polygonRing++;\n\n    fillCoords(polygons.positions, ring, indexMap.polygonPosition, coordLength);\n\n    const nPositions = ring.length;\n    fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n\n    polygons.globalFeatureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.feature),\n      indexMap.polygonPosition\n    );\n    polygons.featureIds.set(\n      new Uint32Array(nPositions).fill(indexMap.polygonFeature),\n      indexMap.polygonPosition\n    );\n    indexMap.polygonPosition += nPositions;\n  }\n}\n\n/** Fills MultiPolygon coordinates into polygons object of arrays */\nfunction handleMultiPolygon(coords, polygons, indexMap, coordLength, properties) {\n  for (const polygon of coords) {\n    handlePolygon(polygon, polygons, indexMap, coordLength, properties);\n  }\n}\n\n/** Wrap each array in an accessor object with value and size keys */\nfunction makeAccessorObjects(points, lines, polygons, coordLength): BinaryFeatures {\n  const returnObj = {\n    points: {\n      ...points,\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1},\n      type: 'Point'\n    },\n    lines: {\n      ...lines,\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1},\n      type: 'LineString'\n    },\n    polygons: {\n      ...polygons,\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1},\n      type: 'Polygon'\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n\n  return returnObj as unknown as BinaryFeatures;\n}\n\n/** Add numeric properties to object */\nfunction fillNumericProperties(object, properties, index, length) {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].set(\n        new Array(length).fill(properties[numericPropName]),\n        index\n      );\n    }\n  }\n}\n\n/** Keep string properties in object */\nfunction keepStringProperties(properties, numericKeys: string[]): GeoJsonProperties {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\n/** @param coords is expected to be a list of arrays, each with length 2-3 */\nfunction fillCoords(array, coords, startVertex, coordLength): void {\n  let index = startVertex * coordLength;\n  for (const coord of coords) {\n    array.set(coord, index);\n    index += coordLength;\n  }\n}\n\n// TODO - how does this work? Different `coordinates` have different nesting\nfunction flatten(arrays): number[][] {\n  return [].concat(...arrays);\n}\n\nfunction deduceArrayType(x: any, constructor: PropArrayConstructor): PropArrayConstructor {\n  if (constructor === Array || !Number.isFinite(x)) {\n    return Array;\n  }\n\n  // If this or previous value required 64bits use Float64Array\n  return constructor === Float64Array || Math.fround(x) !== x ? Float64Array : Float32Array;\n}\n"],"file":"geojson-to-binary.js"}