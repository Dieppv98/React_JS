import { Feature } from '@loaders.gl/schema';
import type { BinaryFeatures } from '@loaders.gl/schema';
export declare type GeojsonToBinaryOptions = {
    coordLength?: number;
    numericPropKeys?: string[];
    PositionDataType?: Function;
};
/** Convert GeoJSON features to flat binary arrays */
export declare function geojsonToBinary(features: Feature[], options?: GeojsonToBinaryOptions): BinaryFeatures;
export declare const TEST_EXPORTS: {
    firstPass: typeof firstPass;
    secondPass: typeof secondPass;
};
declare type PropArrayConstructor = Float32ArrayConstructor | Float64ArrayConstructor | ArrayConstructor;
declare type FirstPassData = {
    coordLength: number;
    numericPropKeys: string[];
    propArrayTypes: {
        [key: string]: PropArrayConstructor;
    };
    pointPositionsCount: number;
    pointFeaturesCount: number;
    linePositionsCount: number;
    linePathsCount: number;
    lineFeaturesCount: number;
    polygonPositionsCount: number;
    polygonObjectsCount: number;
    polygonRingsCount: number;
    polygonFeaturesCount: number;
};
/**
 *  Initial scan over GeoJSON features
 *  Counts number of coordinates of each geometry type and
 *  keeps track of the max coordinate dimensions
 */
declare function firstPass(features: Feature[]): FirstPassData;
/**
 * Second scan over GeoJSON features
 * Fills coordinates into pre-allocated typed arrays
 */
declare function secondPass(features: any, firstPassData: FirstPassData, options: Required<GeojsonToBinaryOptions>): BinaryFeatures;
export {};
//# sourceMappingURL=geojson-to-binary.d.ts.map