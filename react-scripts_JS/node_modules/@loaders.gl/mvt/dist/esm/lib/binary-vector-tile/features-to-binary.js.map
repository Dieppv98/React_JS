{"version":3,"sources":["../../../../src/lib/binary-vector-tile/features-to-binary.ts"],"names":["earcut","featuresToBinary","features","firstPassData","options","propArrayTypes","extractNumericPropTypes","numericPropKeys","Object","keys","filter","k","Array","fillArrays","PositionDataType","Float32Array","TEST_EXPORTS","feature","properties","key","val","deduceArrayType","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","hasGlobalId","coordLength","GlobalFeatureIdsDataType","length","Uint32Array","Uint16Array","points","positions","globalFeatureIds","featureIds","numericProps","fields","lines","pathIndices","polygons","polygonIndices","primitivePolygonIndices","triangles","object","propName","TypedArray","indexMap","pointPosition","pointFeature","linePosition","linePath","lineFeature","polygonPosition","polygonObject","polygonRing","polygonFeature","geometry","type","handlePoint","push","keepStringProperties","id","handleLineString","handlePolygon","Error","makeAccessorObjects","set","data","nPositions","fillNumericProperties","fill","i","il","start","end","l","ll","startPosition","areas","nextLines","undefined","endPosition","triangulatePolygon","polygonPositions","subarray","offset","holes","slice","map","n","indices","t","tl","returnObj","value","size","geomType","numericProp","index","numericPropName","numericKeys","props","includes","x","constructor","Number","isFinite","Float64Array","Math","fround"],"mappings":"AACA,SAAQA,MAAR,QAAqB,kBAArB;AAyBA,OAAO,SAASC,gBAAT,CACLC,QADK,EAELC,aAFK,EAGLC,OAHK,EAIL;AACA,QAAMC,cAAc,GAAGC,uBAAuB,CAACJ,QAAD,CAA9C;AACA,QAAMK,eAAe,GAAGC,MAAM,CAACC,IAAP,CAAYJ,cAAZ,EAA4BK,MAA5B,CAAoCC,CAAD,IAAON,cAAc,CAACM,CAAD,CAAd,KAAsBC,KAAhE,CAAxB;AACA,SAAOC,UAAU,CAACX,QAAD,EAAWC,aAAX,EAA0B;AACzCI,IAAAA,eAAe,EAAEH,OAAO,GAAGA,OAAO,CAACG,eAAX,GAA6BA,eADZ;AAEzCF,IAAAA,cAFyC;AAGzCS,IAAAA,gBAAgB,EAAEV,OAAO,GAAGA,OAAO,CAACU,gBAAX,GAA8BC;AAHd,GAA1B,CAAjB;AAKD;AAED,OAAO,MAAMC,YAAY,GAAG;AAC1BH,EAAAA;AAD0B,CAArB;;AAUP,SAASP,uBAAT,CAAiCJ,QAAjC,EAEE;AACA,QAAMG,cAAc,GAAG,EAAvB;;AACA,OAAK,MAAMY,OAAX,IAAsBf,QAAtB,EAAgC;AAC9B,QAAIe,OAAO,CAACC,UAAZ,EAAwB;AACtB,WAAK,MAAMC,GAAX,IAAkBF,OAAO,CAACC,UAA1B,EAAsC;AAKpC,cAAME,GAAG,GAAGH,OAAO,CAACC,UAAR,CAAmBC,GAAnB,CAAZ;AACAd,QAAAA,cAAc,CAACc,GAAD,CAAd,GAAsBE,eAAe,CAACD,GAAD,EAAMf,cAAc,CAACc,GAAD,CAApB,CAArC;AACD;AACF;AACF;;AAED,SAAOd,cAAP;AACD;;AAWD,SAASQ,UAAT,CACEX,QADF,EAEEC,aAFF,EAGEC,OAHF,EAIE;AACA,QAAM;AACJkB,IAAAA,mBADI;AAEJC,IAAAA,kBAFI;AAGJC,IAAAA,kBAHI;AAIJC,IAAAA,cAJI;AAKJC,IAAAA,iBALI;AAMJC,IAAAA,qBANI;AAOJC,IAAAA,mBAPI;AAQJC,IAAAA,iBARI;AASJC,IAAAA;AATI,MAUF3B,aAVJ;AAWA,QAAM;AAACI,IAAAA,eAAD;AAAkBF,IAAAA,cAAlB;AAAkCS,IAAAA,gBAAgB,GAAGC;AAArD,MAAqEX,OAA3E;AACA,QAAM2B,WAAW,GAAG7B,QAAQ,CAAC,CAAD,CAAR,IAAe,QAAQA,QAAQ,CAAC,CAAD,CAAnD;AACA,QAAM8B,WAAW,GAAG,CAApB;AACA,QAAMC,wBAAwB,GAAG/B,QAAQ,CAACgC,MAAT,GAAkB,KAAlB,GAA0BC,WAA1B,GAAwCC,WAAzE;AACA,QAAMC,MAAiB,GAAG;AACxBC,IAAAA,SAAS,EAAE,IAAIxB,gBAAJ,CAAqBQ,mBAAmB,GAAGU,WAA3C,CADa;AAExBO,IAAAA,gBAAgB,EAAE,IAAIN,wBAAJ,CAA6BX,mBAA7B,CAFM;AAGxBkB,IAAAA,UAAU,EACRjB,kBAAkB,GAAG,KAArB,GACI,IAAIY,WAAJ,CAAgBb,mBAAhB,CADJ,GAEI,IAAIc,WAAJ,CAAgBd,mBAAhB,CANkB;AAOxBmB,IAAAA,YAAY,EAAE,EAPU;AAQxBvB,IAAAA,UAAU,EAAE,EARY;AASxBwB,IAAAA,MAAM,EAAE;AATgB,GAA1B;AAWA,QAAMC,KAAe,GAAG;AACtBC,IAAAA,WAAW,EACTpB,kBAAkB,GAAG,KAArB,GACI,IAAIW,WAAJ,CAAgBV,cAAc,GAAG,CAAjC,CADJ,GAEI,IAAIW,WAAJ,CAAgBX,cAAc,GAAG,CAAjC,CAJgB;AAKtBa,IAAAA,SAAS,EAAE,IAAIxB,gBAAJ,CAAqBU,kBAAkB,GAAGQ,WAA1C,CALW;AAMtBO,IAAAA,gBAAgB,EAAE,IAAIN,wBAAJ,CAA6BT,kBAA7B,CANI;AAOtBgB,IAAAA,UAAU,EACRd,iBAAiB,GAAG,KAApB,GACI,IAAIS,WAAJ,CAAgBX,kBAAhB,CADJ,GAEI,IAAIY,WAAJ,CAAgBZ,kBAAhB,CAVgB;AAWtBiB,IAAAA,YAAY,EAAE,EAXQ;AAYtBvB,IAAAA,UAAU,EAAE,EAZU;AAatBwB,IAAAA,MAAM,EAAE;AAbc,GAAxB;AAeA,QAAMG,QAAqB,GAAG;AAC5BC,IAAAA,cAAc,EACZnB,qBAAqB,GAAG,KAAxB,GACI,IAAIQ,WAAJ,CAAgBP,mBAAmB,GAAG,CAAtC,CADJ,GAEI,IAAIQ,WAAJ,CAAgBR,mBAAmB,GAAG,CAAtC,CAJsB;AAK5BmB,IAAAA,uBAAuB,EACrBpB,qBAAqB,GAAG,KAAxB,GACI,IAAIQ,WAAJ,CAAgBN,iBAAiB,GAAG,CAApC,CADJ,GAEI,IAAIO,WAAJ,CAAgBP,iBAAiB,GAAG,CAApC,CARsB;AAS5BS,IAAAA,SAAS,EAAE,IAAIxB,gBAAJ,CAAqBa,qBAAqB,GAAGK,WAA7C,CATiB;AAU5BgB,IAAAA,SAAS,EAAE,EAViB;AAW5BT,IAAAA,gBAAgB,EAAE,IAAIN,wBAAJ,CAA6BN,qBAA7B,CAXU;AAY5Ba,IAAAA,UAAU,EACRV,oBAAoB,GAAG,KAAvB,GACI,IAAIK,WAAJ,CAAgBR,qBAAhB,CADJ,GAEI,IAAIS,WAAJ,CAAgBT,qBAAhB,CAfsB;AAgB5Bc,IAAAA,YAAY,EAAE,EAhBc;AAiB5BvB,IAAAA,UAAU,EAAE,EAjBgB;AAkB5BwB,IAAAA,MAAM,EAAE;AAlBoB,GAA9B;;AAsBA,OAAK,MAAMO,MAAX,IAAqB,CAACZ,MAAD,EAASM,KAAT,EAAgBE,QAAhB,CAArB,EAAgD;AAC9C,SAAK,MAAMK,QAAX,IAAuB3C,eAAvB,EAAwC;AAGtC,YAAM4C,UAAU,GAAG9C,cAAc,CAAC6C,QAAD,CAAjC;AACAD,MAAAA,MAAM,CAACR,YAAP,CAAoBS,QAApB,IAAgC,IAAIC,UAAJ,CAAeF,MAAM,CAACX,SAAP,CAAiBJ,MAAjB,GAA0BF,WAAzC,CAAhC;AACD;AACF;;AAGDW,EAAAA,KAAK,CAACC,WAAN,CAAkBnB,cAAlB,IAAoCD,kBAApC;AACAqB,EAAAA,QAAQ,CAACC,cAAT,CAAwBlB,mBAAxB,IAA+CD,qBAA/C;AACAkB,EAAAA,QAAQ,CAACE,uBAAT,CAAiClB,iBAAjC,IAAsDF,qBAAtD;AAEA,QAAMyB,QAAQ,GAAG;AACfC,IAAAA,aAAa,EAAE,CADA;AAEfC,IAAAA,YAAY,EAAE,CAFC;AAGfC,IAAAA,YAAY,EAAE,CAHC;AAIfC,IAAAA,QAAQ,EAAE,CAJK;AAKfC,IAAAA,WAAW,EAAE,CALE;AAMfC,IAAAA,eAAe,EAAE,CANF;AAOfC,IAAAA,aAAa,EAAE,CAPA;AAQfC,IAAAA,WAAW,EAAE,CARE;AASfC,IAAAA,cAAc,EAAE,CATD;AAUf5C,IAAAA,OAAO,EAAE;AAVM,GAAjB;;AAaA,OAAK,MAAMA,OAAX,IAAsBf,QAAtB,EAAgC;AAC9B,UAAM4D,QAAQ,GAAG7C,OAAO,CAAC6C,QAAzB;AACA,UAAM5C,UAAU,GAAGD,OAAO,CAACC,UAAR,IAAsB,EAAzC;;AAEA,YAAQ4C,QAAQ,CAACC,IAAjB;AACE,WAAK,OAAL;AACA,WAAK,YAAL;AACEC,QAAAA,WAAW,CAACF,QAAD,EAAWzB,MAAX,EAAmBe,QAAnB,EAA6BpB,WAA7B,EAA0Cd,UAA1C,CAAX;AACAmB,QAAAA,MAAM,CAACnB,UAAP,CAAkB+C,IAAlB,CAAuBC,oBAAoB,CAAChD,UAAD,EAAaX,eAAb,CAA3C;;AACA,YAAIwB,WAAJ,EAAiB;AACfM,UAAAA,MAAM,CAACK,MAAP,CAAcuB,IAAd,CAAmB;AAACE,YAAAA,EAAE,EAAElD,OAAO,CAACkD;AAAb,WAAnB;AACD;;AACDf,QAAAA,QAAQ,CAACE,YAAT;AACA;;AACF,WAAK,YAAL;AACA,WAAK,iBAAL;AACEc,QAAAA,gBAAgB,CAACN,QAAD,EAAWnB,KAAX,EAAkBS,QAAlB,EAA4BpB,WAA5B,EAAyCd,UAAzC,CAAhB;AACAyB,QAAAA,KAAK,CAACzB,UAAN,CAAiB+C,IAAjB,CAAsBC,oBAAoB,CAAChD,UAAD,EAAaX,eAAb,CAA1C;;AACA,YAAIwB,WAAJ,EAAiB;AACfY,UAAAA,KAAK,CAACD,MAAN,CAAauB,IAAb,CAAkB;AAACE,YAAAA,EAAE,EAAElD,OAAO,CAACkD;AAAb,WAAlB;AACD;;AACDf,QAAAA,QAAQ,CAACK,WAAT;AACA;;AACF,WAAK,SAAL;AACA,WAAK,cAAL;AACEY,QAAAA,aAAa,CAACP,QAAD,EAAWjB,QAAX,EAAqBO,QAArB,EAA+BpB,WAA/B,EAA4Cd,UAA5C,CAAb;AACA2B,QAAAA,QAAQ,CAAC3B,UAAT,CAAoB+C,IAApB,CAAyBC,oBAAoB,CAAChD,UAAD,EAAaX,eAAb,CAA7C;;AACA,YAAIwB,WAAJ,EAAiB;AACfc,UAAAA,QAAQ,CAACH,MAAT,CAAgBuB,IAAhB,CAAqB;AAACE,YAAAA,EAAE,EAAElD,OAAO,CAACkD;AAAb,WAArB;AACD;;AACDf,QAAAA,QAAQ,CAACS,cAAT;AACA;;AACF;AACE,cAAM,IAAIS,KAAJ,CAAU,uBAAV,CAAN;AA7BJ;;AAgCAlB,IAAAA,QAAQ,CAACnC,OAAT;AACD;;AAGD,SAAOsD,mBAAmB,CAAClC,MAAD,EAASM,KAAT,EAAgBE,QAAhB,EAA0Bb,WAA1B,CAA1B;AACD;;AAWD,SAASgC,WAAT,CACEF,QADF,EAEEzB,MAFF,EAGEe,QAHF,EAeEpB,WAfF,EAgBEd,UAhBF,EAiBQ;AACNmB,EAAAA,MAAM,CAACC,SAAP,CAAiBkC,GAAjB,CAAqBV,QAAQ,CAACW,IAA9B,EAAoCrB,QAAQ,CAACC,aAAT,GAAyBrB,WAA7D;AAEA,QAAM0C,UAAU,GAAGZ,QAAQ,CAACW,IAAT,CAAcvC,MAAd,GAAuBF,WAA1C;AACA2C,EAAAA,qBAAqB,CAACtC,MAAD,EAASnB,UAAT,EAAqBkC,QAAQ,CAACC,aAA9B,EAA6CqB,UAA7C,CAArB;AACArC,EAAAA,MAAM,CAACE,gBAAP,CAAwBqC,IAAxB,CACExB,QAAQ,CAACnC,OADX,EAEEmC,QAAQ,CAACC,aAFX,EAGED,QAAQ,CAACC,aAAT,GAAyBqB,UAH3B;AAKArC,EAAAA,MAAM,CAACG,UAAP,CAAkBoC,IAAlB,CACExB,QAAQ,CAACE,YADX,EAEEF,QAAQ,CAACC,aAFX,EAGED,QAAQ,CAACC,aAAT,GAAyBqB,UAH3B;AAMAtB,EAAAA,QAAQ,CAACC,aAAT,IAA0BqB,UAA1B;AACD;;AAWD,SAASN,gBAAT,CACEN,QADF,EAEEnB,KAFF,EAGES,QAHF,EAeEpB,WAfF,EAgBEd,UAhBF,EAiBQ;AACNyB,EAAAA,KAAK,CAACL,SAAN,CAAgBkC,GAAhB,CAAoBV,QAAQ,CAACW,IAA7B,EAAmCrB,QAAQ,CAACG,YAAT,GAAwBvB,WAA3D;AAEA,QAAM0C,UAAU,GAAGZ,QAAQ,CAACW,IAAT,CAAcvC,MAAd,GAAuBF,WAA1C;AACA2C,EAAAA,qBAAqB,CAAChC,KAAD,EAAQzB,UAAR,EAAoBkC,QAAQ,CAACG,YAA7B,EAA2CmB,UAA3C,CAArB;AAEA/B,EAAAA,KAAK,CAACJ,gBAAN,CAAuBqC,IAAvB,CACExB,QAAQ,CAACnC,OADX,EAEEmC,QAAQ,CAACG,YAFX,EAGEH,QAAQ,CAACG,YAAT,GAAwBmB,UAH1B;AAKA/B,EAAAA,KAAK,CAACH,UAAN,CAAiBoC,IAAjB,CACExB,QAAQ,CAACK,WADX,EAEEL,QAAQ,CAACG,YAFX,EAGEH,QAAQ,CAACG,YAAT,GAAwBmB,UAH1B;;AAMA,OAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGhB,QAAQ,CAACnB,KAAT,CAAeT,MAApC,EAA4C2C,CAAC,GAAGC,EAAhD,EAAoD,EAAED,CAAtD,EAAyD;AAGvD,UAAME,KAAK,GAAGjB,QAAQ,CAACnB,KAAT,CAAekC,CAAf,CAAd;AACA,UAAMG,GAAG,GACPH,CAAC,KAAKC,EAAE,GAAG,CAAX,GACIhB,QAAQ,CAACW,IAAT,CAAcvC,MADlB,GAEI4B,QAAQ,CAACnB,KAAT,CAAekC,CAAC,GAAG,CAAnB,CAHN;AAKAlC,IAAAA,KAAK,CAACC,WAAN,CAAkBQ,QAAQ,CAACI,QAAT,EAAlB,IAAyCJ,QAAQ,CAACG,YAAlD;AACAH,IAAAA,QAAQ,CAACG,YAAT,IAAyB,CAACyB,GAAG,GAAGD,KAAP,IAAgB/C,WAAzC;AACD;AACF;;AAWD,SAASqC,aAAT,CACEP,QADF,EAEEjB,QAFF,EAGEO,QAHF,EAeEpB,WAfF,EAgBEd,UAhBF,EAiBQ;AACN2B,EAAAA,QAAQ,CAACP,SAAT,CAAmBkC,GAAnB,CAAuBV,QAAQ,CAACW,IAAhC,EAAsCrB,QAAQ,CAACM,eAAT,GAA2B1B,WAAjE;AAEA,QAAM0C,UAAU,GAAGZ,QAAQ,CAACW,IAAT,CAAcvC,MAAd,GAAuBF,WAA1C;AACA2C,EAAAA,qBAAqB,CAAC9B,QAAD,EAAW3B,UAAX,EAAuBkC,QAAQ,CAACM,eAAhC,EAAiDgB,UAAjD,CAArB;AACA7B,EAAAA,QAAQ,CAACN,gBAAT,CAA0BqC,IAA1B,CACExB,QAAQ,CAACnC,OADX,EAEEmC,QAAQ,CAACM,eAFX,EAGEN,QAAQ,CAACM,eAAT,GAA2BgB,UAH7B;AAKA7B,EAAAA,QAAQ,CAACL,UAAT,CAAoBoC,IAApB,CACExB,QAAQ,CAACS,cADX,EAEET,QAAQ,CAACM,eAFX,EAGEN,QAAQ,CAACM,eAAT,GAA2BgB,UAH7B;;AAOA,OAAK,IAAIO,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGpB,QAAQ,CAACnB,KAAT,CAAeT,MAApC,EAA4C+C,CAAC,GAAGC,EAAhD,EAAoD,EAAED,CAAtD,EAAyD;AACvD,UAAME,aAAa,GAAG/B,QAAQ,CAACM,eAA/B;AACAb,IAAAA,QAAQ,CAACC,cAAT,CAAwBM,QAAQ,CAACO,aAAT,EAAxB,IAAoDwB,aAApD;AAEA,UAAMC,KAAK,GAAGtB,QAAQ,CAACsB,KAAT,CAAgBH,CAAhB,CAAd;AACA,UAAMtC,KAAK,GAAGmB,QAAQ,CAACnB,KAAT,CAAesC,CAAf,CAAd;AACA,UAAMI,SAAS,GAAGvB,QAAQ,CAACnB,KAAT,CAAesC,CAAC,GAAG,CAAnB,CAAlB;;AAEA,SAAK,IAAIJ,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGnC,KAAK,CAACT,MAA3B,EAAmC2C,CAAC,GAAGC,EAAvC,EAA2C,EAAED,CAA7C,EAAgD;AAC9C,YAAME,KAAK,GAAGpC,KAAK,CAACkC,CAAD,CAAnB;AACA,YAAMG,GAAG,GACPH,CAAC,KAAKC,EAAE,GAAG,CAAX,GAEIO,SAAS,KAAKC,SAAd,GACExB,QAAQ,CAACW,IAAT,CAAcvC,MADhB,GAEEmD,SAAS,CAAC,CAAD,CAJf,GAKI1C,KAAK,CAACkC,CAAC,GAAG,CAAL,CANX;AAQAhC,MAAAA,QAAQ,CAACE,uBAAT,CAAiCK,QAAQ,CAACQ,WAAT,EAAjC,IAA2DR,QAAQ,CAACM,eAApE;AACAN,MAAAA,QAAQ,CAACM,eAAT,IAA4B,CAACsB,GAAG,GAAGD,KAAP,IAAgB/C,WAA5C;AACD;;AAED,UAAMuD,WAAW,GAAGnC,QAAQ,CAACM,eAA7B;AACA8B,IAAAA,kBAAkB,CAAC3C,QAAD,EAAWuC,KAAX,EAAkBzC,KAAlB,EAAyB;AAACwC,MAAAA,aAAD;AAAgBI,MAAAA,WAAhB;AAA6BvD,MAAAA;AAA7B,KAAzB,CAAlB;AACD;AACF;;AAUD,SAASwD,kBAAT,CACE3C,QADF,EAEEuC,KAFF,EAGEzC,KAHF,EAIE;AACEwC,EAAAA,aADF;AAEEI,EAAAA,WAFF;AAGEvD,EAAAA;AAHF,CAJF,EASQ;AACN,QAAM+C,KAAK,GAAGI,aAAa,GAAGnD,WAA9B;AACA,QAAMgD,GAAG,GAAGO,WAAW,GAAGvD,WAA1B;AAGA,QAAMyD,gBAAgB,GAAG5C,QAAQ,CAACP,SAAT,CAAmBoD,QAAnB,CAA4BX,KAA5B,EAAmCC,GAAnC,CAAzB;AAGA,QAAMW,MAAM,GAAGhD,KAAK,CAAC,CAAD,CAApB;AACA,QAAMiD,KAAK,GAAGjD,KAAK,CAACkD,KAAN,CAAY,CAAZ,EAAeC,GAAf,CAAoBC,CAAD,IAAe,CAACA,CAAC,GAAGJ,MAAL,IAAe3D,WAAjD,CAAd;AAGA,QAAMgE,OAAO,GAAGhG,MAAM,CAACyF,gBAAD,EAAmBG,KAAnB,EAA0B5D,WAA1B,EAAuCoD,KAAvC,CAAtB;;AAIA,OAAK,IAAIa,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,OAAO,CAAC9D,MAA7B,EAAqC+D,CAAC,GAAGC,EAAzC,EAA6C,EAAED,CAA/C,EAAkD;AAChDpD,IAAAA,QAAQ,CAACG,SAAT,CAAmBiB,IAAnB,CAAwBkB,aAAa,GAAGa,OAAO,CAACC,CAAD,CAA/C;AACD;AACF;;AAWD,SAAS1B,mBAAT,CACElC,MADF,EAEEM,KAFF,EAGEE,QAHF,EAIEb,WAJF,EAKE;AACA,QAAMmE,SAAS,GAAG;AAChB9D,IAAAA,MAAM,EAAE,EACN,GAAGA,MADG;AAENC,MAAAA,SAAS,EAAE;AAAC8D,QAAAA,KAAK,EAAE/D,MAAM,CAACC,SAAf;AAA0B+D,QAAAA,IAAI,EAAErE;AAAhC,OAFL;AAGNO,MAAAA,gBAAgB,EAAE;AAAC6D,QAAAA,KAAK,EAAE/D,MAAM,CAACE,gBAAf;AAAiC8D,QAAAA,IAAI,EAAE;AAAvC,OAHZ;AAIN7D,MAAAA,UAAU,EAAE;AAAC4D,QAAAA,KAAK,EAAE/D,MAAM,CAACG,UAAf;AAA2B6D,QAAAA,IAAI,EAAE;AAAjC;AAJN,KADQ;AAOhB1D,IAAAA,KAAK,EAAE,EACL,GAAGA,KADE;AAELC,MAAAA,WAAW,EAAE;AAACwD,QAAAA,KAAK,EAAEzD,KAAK,CAACC,WAAd;AAA2ByD,QAAAA,IAAI,EAAE;AAAjC,OAFR;AAGL/D,MAAAA,SAAS,EAAE;AAAC8D,QAAAA,KAAK,EAAEzD,KAAK,CAACL,SAAd;AAAyB+D,QAAAA,IAAI,EAAErE;AAA/B,OAHN;AAILO,MAAAA,gBAAgB,EAAE;AAAC6D,QAAAA,KAAK,EAAEzD,KAAK,CAACJ,gBAAd;AAAgC8D,QAAAA,IAAI,EAAE;AAAtC,OAJb;AAKL7D,MAAAA,UAAU,EAAE;AAAC4D,QAAAA,KAAK,EAAEzD,KAAK,CAACH,UAAd;AAA0B6D,QAAAA,IAAI,EAAE;AAAhC;AALP,KAPS;AAchBxD,IAAAA,QAAQ,EAAE,EACR,GAAGA,QADK;AAERC,MAAAA,cAAc,EAAE;AAACsD,QAAAA,KAAK,EAAEvD,QAAQ,CAACC,cAAjB;AAAiCuD,QAAAA,IAAI,EAAE;AAAvC,OAFR;AAGRtD,MAAAA,uBAAuB,EAAE;AAACqD,QAAAA,KAAK,EAAEvD,QAAQ,CAACE,uBAAjB;AAA0CsD,QAAAA,IAAI,EAAE;AAAhD,OAHjB;AAIR/D,MAAAA,SAAS,EAAE;AAAC8D,QAAAA,KAAK,EAAEvD,QAAQ,CAACP,SAAjB;AAA4B+D,QAAAA,IAAI,EAAErE;AAAlC,OAJH;AAKRgB,MAAAA,SAAS,EAAE;AAACoD,QAAAA,KAAK,EAAE,IAAIjE,WAAJ,CAAgBU,QAAQ,CAACG,SAAzB,CAAR;AAA6CqD,QAAAA,IAAI,EAAE;AAAnD,OALH;AAMR9D,MAAAA,gBAAgB,EAAE;AAAC6D,QAAAA,KAAK,EAAEvD,QAAQ,CAACN,gBAAjB;AAAmC8D,QAAAA,IAAI,EAAE;AAAzC,OANV;AAOR7D,MAAAA,UAAU,EAAE;AAAC4D,QAAAA,KAAK,EAAEvD,QAAQ,CAACL,UAAjB;AAA6B6D,QAAAA,IAAI,EAAE;AAAnC;AAPJ;AAdM,GAAlB;;AAyBA,OAAK,MAAMC,QAAX,IAAuBH,SAAvB,EAAkC;AAChC,SAAK,MAAMI,WAAX,IAA0BJ,SAAS,CAACG,QAAD,CAAT,CAAoB7D,YAA9C,EAA4D;AAC1D0D,MAAAA,SAAS,CAACG,QAAD,CAAT,CAAoB7D,YAApB,CAAiC8D,WAAjC,IAAgD;AAC9CH,QAAAA,KAAK,EAAED,SAAS,CAACG,QAAD,CAAT,CAAoB7D,YAApB,CAAiC8D,WAAjC,CADuC;AAE9CF,QAAAA,IAAI,EAAE;AAFwC,OAAhD;AAID;AACF;;AACD,SAAOF,SAAP;AACD;;AAUD,SAASxB,qBAAT,CACE1B,MADF,EAEE/B,UAFF,EAGEsF,KAHF,EAIEtE,MAJF,EAKQ;AACN,OAAK,MAAMuE,eAAX,IAA8BxD,MAAM,CAACR,YAArC,EAAmD;AACjD,QAAIgE,eAAe,IAAIvF,UAAvB,EAAmC;AACjC+B,MAAAA,MAAM,CAACR,YAAP,CAAoBgE,eAApB,EAAqC7B,IAArC,CAA0C1D,UAAU,CAACuF,eAAD,CAApD,EAAuED,KAAvE,EAA8EA,KAAK,GAAGtE,MAAtF;AACD;AACF;AACF;;AASD,SAASgC,oBAAT,CACEhD,UADF,EAEEwF,WAFF,EAGE;AACA,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,MAAMxF,GAAX,IAAkBD,UAAlB,EAA8B;AAC5B,QAAI,CAACwF,WAAW,CAACE,QAAZ,CAAqBzF,GAArB,CAAL,EAAgC;AAC9BwF,MAAAA,KAAK,CAACxF,GAAD,CAAL,GAAaD,UAAU,CAACC,GAAD,CAAvB;AACD;AACF;;AACD,SAAOwF,KAAP;AACD;;AAED,SAAStF,eAAT,CAAyBwF,CAAzB,EAAiCC,WAAjC,EAAgG;AAC9F,MAAIA,WAAW,KAAKlG,KAAhB,IAAyB,CAACmG,MAAM,CAACC,QAAP,CAAgBH,CAAhB,CAA9B,EAAkD;AAChD,WAAOjG,KAAP;AACD;;AAGD,SAAOkG,WAAW,KAAKG,YAAhB,IAAgCC,IAAI,CAACC,MAAL,CAAYN,CAAZ,MAAmBA,CAAnD,GAAuDI,YAAvD,GAAsElG,YAA7E;AACD","sourcesContent":["/* eslint-disable indent */\nimport {earcut} from '@math.gl/polygon';\nimport {\n  MvtBinaryCoordinates,\n  MvtBinaryGeometry,\n  MvtBinaryOptions,\n  MvtPropArrayConstructor,\n  MvtFirstPassedData,\n  MvtLines,\n  MvtPoints,\n  MvtPolygons\n} from '../types';\n\n/**\n * Convert binary features to flat binary arrays. Similar to\n * `geojsonToBinary` helper function, except that it expects\n * a binary representation of the feature data, which enables\n * 2X-3X speed increase in parse speed, compared to using\n * geoJSON. See `binary-vector-tile/VectorTileFeature` for\n * data format detais\n *\n * @param features\n * @param firstPassData\n * @param options\n * @returns filled arrays\n */\nexport function featuresToBinary(\n  features: MvtBinaryCoordinates[],\n  firstPassData: MvtFirstPassedData,\n  options?: MvtBinaryOptions\n) {\n  const propArrayTypes = extractNumericPropTypes(features);\n  const numericPropKeys = Object.keys(propArrayTypes).filter((k) => propArrayTypes[k] !== Array);\n  return fillArrays(features, firstPassData, {\n    numericPropKeys: options ? options.numericPropKeys : numericPropKeys,\n    propArrayTypes,\n    PositionDataType: options ? options.PositionDataType : Float32Array\n  });\n}\n\nexport const TEST_EXPORTS = {\n  fillArrays\n};\n\n/**\n * Extracts properties that are always numeric\n *\n * @param features\n * @returns object with numeric types\n */\nfunction extractNumericPropTypes(features: MvtBinaryCoordinates[]): {\n  [key: string]: MvtPropArrayConstructor;\n} {\n  const propArrayTypes = {};\n  for (const feature of features) {\n    if (feature.properties) {\n      for (const key in feature.properties) {\n        // If property has not been seen before, or if property has been numeric\n        // in all previous features, check if numeric in this feature\n        // If not numeric, Array is stored to prevent rechecking in the future\n        // Additionally, detects if 64 bit precision is required\n        const val = feature.properties[key];\n        propArrayTypes[key] = deduceArrayType(val, propArrayTypes[key]);\n      }\n    }\n  }\n\n  return propArrayTypes;\n}\n\n/**\n * Fills coordinates into pre-allocated typed arrays\n *\n * @param features\n * @param firstPassData\n * @param options\n * @returns an accessor object with value and size keys\n */\n// eslint-disable-next-line complexity\nfunction fillArrays(\n  features: MvtBinaryCoordinates[],\n  firstPassData: MvtFirstPassedData,\n  options: MvtBinaryOptions\n) {\n  const {\n    pointPositionsCount,\n    pointFeaturesCount,\n    linePositionsCount,\n    linePathsCount,\n    lineFeaturesCount,\n    polygonPositionsCount,\n    polygonObjectsCount,\n    polygonRingsCount,\n    polygonFeaturesCount\n  } = firstPassData;\n  const {numericPropKeys, propArrayTypes, PositionDataType = Float32Array} = options;\n  const hasGlobalId = features[0] && 'id' in features[0];\n  const coordLength = 2;\n  const GlobalFeatureIdsDataType = features.length > 65535 ? Uint32Array : Uint16Array;\n  const points: MvtPoints = {\n    positions: new PositionDataType(pointPositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(pointPositionsCount),\n    featureIds:\n      pointFeaturesCount > 65535\n        ? new Uint32Array(pointPositionsCount)\n        : new Uint16Array(pointPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const lines: MvtLines = {\n    pathIndices:\n      linePositionsCount > 65535\n        ? new Uint32Array(linePathsCount + 1)\n        : new Uint16Array(linePathsCount + 1),\n    positions: new PositionDataType(linePositionsCount * coordLength),\n    globalFeatureIds: new GlobalFeatureIdsDataType(linePositionsCount),\n    featureIds:\n      lineFeaturesCount > 65535\n        ? new Uint32Array(linePositionsCount)\n        : new Uint16Array(linePositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n  const polygons: MvtPolygons = {\n    polygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonObjectsCount + 1)\n        : new Uint16Array(polygonObjectsCount + 1),\n    primitivePolygonIndices:\n      polygonPositionsCount > 65535\n        ? new Uint32Array(polygonRingsCount + 1)\n        : new Uint16Array(polygonRingsCount + 1),\n    positions: new PositionDataType(polygonPositionsCount * coordLength),\n    triangles: [],\n    globalFeatureIds: new GlobalFeatureIdsDataType(polygonPositionsCount),\n    featureIds:\n      polygonFeaturesCount > 65535\n        ? new Uint32Array(polygonPositionsCount)\n        : new Uint16Array(polygonPositionsCount),\n    numericProps: {},\n    properties: [],\n    fields: []\n  };\n\n  // Instantiate numeric properties arrays; one value per vertex\n  for (const object of [points, lines, polygons]) {\n    for (const propName of numericPropKeys) {\n      // If property has been numeric in all previous features in which the property existed, check\n      // if numeric in this feature\n      const TypedArray = propArrayTypes[propName];\n      object.numericProps[propName] = new TypedArray(object.positions.length / coordLength);\n    }\n  }\n\n  // Set last element of path/polygon indices as positions length\n  lines.pathIndices[linePathsCount] = linePositionsCount;\n  polygons.polygonIndices[polygonObjectsCount] = polygonPositionsCount;\n  polygons.primitivePolygonIndices[polygonRingsCount] = polygonPositionsCount;\n\n  const indexMap = {\n    pointPosition: 0,\n    pointFeature: 0,\n    linePosition: 0,\n    linePath: 0,\n    lineFeature: 0,\n    polygonPosition: 0,\n    polygonObject: 0,\n    polygonRing: 0,\n    polygonFeature: 0,\n    feature: 0\n  };\n\n  for (const feature of features) {\n    const geometry = feature.geometry;\n    const properties = feature.properties || {};\n\n    switch (geometry.type) {\n      case 'Point':\n      case 'MultiPoint':\n        handlePoint(geometry, points, indexMap, coordLength, properties);\n        points.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          points.fields.push({id: feature.id});\n        }\n        indexMap.pointFeature++;\n        break;\n      case 'LineString':\n      case 'MultiLineString':\n        handleLineString(geometry, lines, indexMap, coordLength, properties);\n        lines.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          lines.fields.push({id: feature.id});\n        }\n        indexMap.lineFeature++;\n        break;\n      case 'Polygon':\n      case 'MultiPolygon':\n        handlePolygon(geometry, polygons, indexMap, coordLength, properties);\n        polygons.properties.push(keepStringProperties(properties, numericPropKeys));\n        if (hasGlobalId) {\n          polygons.fields.push({id: feature.id});\n        }\n        indexMap.polygonFeature++;\n        break;\n      default:\n        throw new Error('Invalid geometry type');\n    }\n\n    indexMap.feature++;\n  }\n\n  // Wrap each array in an accessor object with value and size keys\n  return makeAccessorObjects(points, lines, polygons, coordLength);\n}\n\n/**\n * Fills (Multi)Point coordinates into points object of arrays\n *\n * @param geometry\n * @param points\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handlePoint(\n  geometry: MvtBinaryGeometry,\n  points: MvtPoints,\n  indexMap: {\n    pointPosition: number;\n    pointFeature: number;\n    linePosition?: number;\n    linePath?: number;\n    lineFeature?: number;\n    polygonPosition?: number;\n    polygonObject?: number;\n    polygonRing?: number;\n    polygonFeature?: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  points.positions.set(geometry.data, indexMap.pointPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(points, properties, indexMap.pointPosition, nPositions);\n  points.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n  points.featureIds.fill(\n    indexMap.pointFeature,\n    indexMap.pointPosition,\n    indexMap.pointPosition + nPositions\n  );\n\n  indexMap.pointPosition += nPositions;\n}\n\n/**\n * Fills (Multi)LineString coordinates into lines object of arrays\n *\n * @param geometry\n * @param lines\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handleLineString(\n  geometry: MvtBinaryGeometry,\n  lines: MvtLines,\n  indexMap: {\n    pointPosition?: number;\n    pointFeature?: number;\n    linePosition: number;\n    linePath: number;\n    lineFeature: number;\n    polygonPosition?: number;\n    polygonObject?: number;\n    polygonRing?: number;\n    polygonFeature?: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  lines.positions.set(geometry.data, indexMap.linePosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(lines, properties, indexMap.linePosition, nPositions);\n\n  lines.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n  lines.featureIds.fill(\n    indexMap.lineFeature,\n    indexMap.linePosition,\n    indexMap.linePosition + nPositions\n  );\n\n  for (let i = 0, il = geometry.lines.length; i < il; ++i) {\n    // Extract range of data we are working with, defined by start\n    // and end indices (these index into the geometry.data array)\n    const start = geometry.lines[i];\n    const end =\n      i === il - 1\n        ? geometry.data.length // last line, so read to end of data\n        : geometry.lines[i + 1]; // start index for next line\n\n    lines.pathIndices[indexMap.linePath++] = indexMap.linePosition;\n    indexMap.linePosition += (end - start) / coordLength;\n  }\n}\n\n/**\n * Fills (Multi)Polygon coordinates into polygons object of arrays\n *\n * @param geometry\n * @param polygons\n * @param indexMap\n * @param coordLength\n * @param properties\n */\nfunction handlePolygon(\n  geometry: MvtBinaryGeometry,\n  polygons: MvtPolygons,\n  indexMap: {\n    pointPosition?: number;\n    pointFeature?: number;\n    linePosition?: number;\n    linePath?: number;\n    lineFeature?: number;\n    polygonPosition: number;\n    polygonObject: number;\n    polygonRing: number;\n    polygonFeature: number;\n    feature: number;\n  },\n  coordLength: number,\n  properties: {[x: string]: string | number | boolean | null}\n): void {\n  polygons.positions.set(geometry.data, indexMap.polygonPosition * coordLength);\n\n  const nPositions = geometry.data.length / coordLength;\n  fillNumericProperties(polygons, properties, indexMap.polygonPosition, nPositions);\n  polygons.globalFeatureIds.fill(\n    indexMap.feature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n  polygons.featureIds.fill(\n    indexMap.polygonFeature,\n    indexMap.polygonPosition,\n    indexMap.polygonPosition + nPositions\n  );\n\n  // Unlike Point & LineString geometry.lines is a 2D array\n  for (let l = 0, ll = geometry.lines.length; l < ll; ++l) {\n    const startPosition = indexMap.polygonPosition;\n    polygons.polygonIndices[indexMap.polygonObject++] = startPosition;\n\n    const areas = geometry.areas![l];\n    const lines = geometry.lines[l];\n    const nextLines = geometry.lines[l + 1];\n\n    for (let i = 0, il = lines.length; i < il; ++i) {\n      const start = lines[i];\n      const end =\n        i === il - 1\n          ? // last line, so either read to:\n            nextLines === undefined\n            ? geometry.data.length // end of data (no next lines)\n            : nextLines[0] // start of first line in nextLines\n          : lines[i + 1]; // start index for next line\n\n      polygons.primitivePolygonIndices[indexMap.polygonRing++] = indexMap.polygonPosition;\n      indexMap.polygonPosition += (end - start) / coordLength;\n    }\n\n    const endPosition = indexMap.polygonPosition;\n    triangulatePolygon(polygons, areas, lines, {startPosition, endPosition, coordLength});\n  }\n}\n\n/**\n * Triangulate polygon using earcut\n *\n * @param polygons\n * @param areas\n * @param lines\n * @param param3\n */\nfunction triangulatePolygon(\n  polygons: MvtPolygons,\n  areas: number,\n  lines: number[],\n  {\n    startPosition,\n    endPosition,\n    coordLength\n  }: {startPosition: number; endPosition: number; coordLength: number}\n): void {\n  const start = startPosition * coordLength;\n  const end = endPosition * coordLength;\n\n  // Extract positions and holes for just this polygon\n  const polygonPositions = polygons.positions.subarray(start, end);\n\n  // Holes are referenced relative to outer polygon\n  const offset = lines[0];\n  const holes = lines.slice(1).map((n: number) => (n - offset) / coordLength);\n\n  // Compute triangulation\n  const indices = earcut(polygonPositions, holes, coordLength, areas);\n\n  // Indices returned by triangulation are relative to start\n  // of polygon, so we need to offset\n  for (let t = 0, tl = indices.length; t < tl; ++t) {\n    polygons.triangles.push(startPosition + indices[t]);\n  }\n}\n\n/**\n * Wrap each array in an accessor object with value and size keys\n *\n * @param points\n * @param lines\n * @param polygons\n * @param coordLength\n * @returns object\n */\nfunction makeAccessorObjects(\n  points: MvtPoints,\n  lines: MvtLines,\n  polygons: MvtPolygons,\n  coordLength: number\n) {\n  const returnObj = {\n    points: {\n      ...points,\n      positions: {value: points.positions, size: coordLength},\n      globalFeatureIds: {value: points.globalFeatureIds, size: 1},\n      featureIds: {value: points.featureIds, size: 1}\n    },\n    lines: {\n      ...lines,\n      pathIndices: {value: lines.pathIndices, size: 1},\n      positions: {value: lines.positions, size: coordLength},\n      globalFeatureIds: {value: lines.globalFeatureIds, size: 1},\n      featureIds: {value: lines.featureIds, size: 1}\n    },\n    polygons: {\n      ...polygons,\n      polygonIndices: {value: polygons.polygonIndices, size: 1},\n      primitivePolygonIndices: {value: polygons.primitivePolygonIndices, size: 1},\n      positions: {value: polygons.positions, size: coordLength},\n      triangles: {value: new Uint32Array(polygons.triangles), size: 1},\n      globalFeatureIds: {value: polygons.globalFeatureIds, size: 1},\n      featureIds: {value: polygons.featureIds, size: 1}\n    }\n  };\n\n  for (const geomType in returnObj) {\n    for (const numericProp in returnObj[geomType].numericProps) {\n      returnObj[geomType].numericProps[numericProp] = {\n        value: returnObj[geomType].numericProps[numericProp],\n        size: 1\n      };\n    }\n  }\n  return returnObj;\n}\n\n/**\n * Add numeric properties to object\n *\n * @param object\n * @param properties\n * @param index\n * @param length\n */\nfunction fillNumericProperties(\n  object: MvtPoints,\n  properties: {[x: string]: string | number | boolean | null},\n  index: number,\n  length: number\n): void {\n  for (const numericPropName in object.numericProps) {\n    if (numericPropName in properties) {\n      object.numericProps[numericPropName].fill(properties[numericPropName], index, index + length);\n    }\n  }\n}\n\n/**\n * Keep string properties in object\n *\n * @param properties\n * @param numericKeys\n * @returns object\n */\nfunction keepStringProperties(\n  properties: {[x: string]: string | number | boolean | null},\n  numericKeys: string[]\n) {\n  const props = {};\n  for (const key in properties) {\n    if (!numericKeys.includes(key)) {\n      props[key] = properties[key];\n    }\n  }\n  return props;\n}\n\nfunction deduceArrayType(x: any, constructor: MvtPropArrayConstructor): MvtPropArrayConstructor {\n  if (constructor === Array || !Number.isFinite(x)) {\n    return Array;\n  }\n\n  // If this or previous value required 64bits use Float64Array\n  return constructor === Float64Array || Math.fround(x) !== x ? Float64Array : Float32Array;\n}\n"],"file":"features-to-binary.js"}