import { MvtBinaryCoordinates, MvtBinaryOptions, MvtFirstPassedData } from '../types';
/**
 * Convert binary features to flat binary arrays. Similar to
 * `geojsonToBinary` helper function, except that it expects
 * a binary representation of the feature data, which enables
 * 2X-3X speed increase in parse speed, compared to using
 * geoJSON. See `binary-vector-tile/VectorTileFeature` for
 * data format detais
 *
 * @param features
 * @param firstPassData
 * @param options
 * @returns filled arrays
 */
export declare function featuresToBinary(features: MvtBinaryCoordinates[], firstPassData: MvtFirstPassedData, options?: MvtBinaryOptions): {
    points: {
        positions: {
            value: Float32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
    lines: {
        pathIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        positions: {
            value: Float32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
    polygons: {
        polygonIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        primitivePolygonIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        positions: {
            value: Float32Array;
            size: number;
        };
        triangles: {
            value: Uint32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
};
export declare const TEST_EXPORTS: {
    fillArrays: typeof fillArrays;
};
/**
 * Fills coordinates into pre-allocated typed arrays
 *
 * @param features
 * @param firstPassData
 * @param options
 * @returns an accessor object with value and size keys
 */
declare function fillArrays(features: MvtBinaryCoordinates[], firstPassData: MvtFirstPassedData, options: MvtBinaryOptions): {
    points: {
        positions: {
            value: Float32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
    lines: {
        pathIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        positions: {
            value: Float32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
    polygons: {
        polygonIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        primitivePolygonIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        positions: {
            value: Float32Array;
            size: number;
        };
        triangles: {
            value: Uint32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
};
export {};
//# sourceMappingURL=features-to-binary.d.ts.map