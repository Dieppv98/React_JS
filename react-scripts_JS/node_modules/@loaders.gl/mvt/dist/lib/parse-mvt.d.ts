import { MvtBinaryCoordinates, MvtMapboxCoordinates } from '../lib/types';
import { LoaderOptions } from '@loaders.gl/loader-utils';
/**
 * Parse MVT arrayBuffer and return GeoJSON.
 *
 * @param arrayBuffer A MVT arrayBuffer
 * @param options
 * @returns A GeoJSON geometry object or a binary representation
 */
export default function parseMVT(arrayBuffer: ArrayBuffer, options?: LoaderOptions): {
    points: {
        positions: {
            value: Float32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
    lines: {
        pathIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        positions: {
            value: Float32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
    polygons: {
        polygonIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        primitivePolygonIndices: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        positions: {
            value: Float32Array;
            size: number;
        };
        triangles: {
            value: Uint32Array;
            size: number;
        };
        globalFeatureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        featureIds: {
            value: Uint16Array | Uint32Array;
            size: number;
        };
        numericProps: object;
        properties: {}[];
        fields: {
            id?: number | undefined;
        }[];
    };
} | (MvtBinaryCoordinates | MvtMapboxCoordinates)[];
//# sourceMappingURL=parse-mvt.d.ts.map