{"version":3,"sources":["../../../src/lib/parse-mvt.ts"],"names":["parseMVT","arrayBuffer","options","normalizeOptions","features","binary","gis","format","firstPassData","pointPositionsCount","pointFeaturesCount","linePositionsCount","linePathsCount","lineFeaturesCount","polygonPositionsCount","polygonObjectsCount","polygonRingsCount","polygonFeaturesCount","byteLength","tile","BinaryVectorTile","Protobuf","VectorTile","loaderOptions","mvt","selectedLayers","Array","isArray","layers","Object","keys","forEach","layerName","vectorTileLayer","featureOptions","i","length","vectorTileFeature","feature","decodedFeature","getDecodedFeatureBinary","getDecodedFeature","push","data","wgs84Coordinates","coordinates","tileIndex","hasTileIndex","Number","isFinite","x","y","z","Error","toGeoJSON","transformToLocalCoordinates","layerProperty","properties","toBinaryCoordinates","transformToLocalCoordinatesBinary","line","extent","p","il"],"mappings":"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","sourcesContent":["// import {VectorTile} from '@mapbox/vector-tile';\nimport VectorTile from './mapbox-vector-tile/vector-tile';\nimport BinaryVectorTile from './binary-vector-tile/vector-tile';\n\nimport {featuresToBinary} from './binary-vector-tile/features-to-binary';\nimport Protobuf from 'pbf';\nimport {MvtBinaryCoordinates, MvtMapboxCoordinates, MvtOptions} from '../lib/types';\nimport VectorTileFeatureBinary from './binary-vector-tile/vector-tile-feature';\nimport VectorTileFeatureMapBox from './mapbox-vector-tile/vector-tile-feature';\nimport {LoaderOptions} from '@loaders.gl/loader-utils';\n\n/**\n * Parse MVT arrayBuffer and return GeoJSON.\n *\n * @param arrayBuffer A MVT arrayBuffer\n * @param options\n * @returns A GeoJSON geometry object or a binary representation\n */\nexport default function parseMVT(arrayBuffer: ArrayBuffer, options?: LoaderOptions) {\n  options = normalizeOptions(options);\n  const features: (MvtBinaryCoordinates | MvtMapboxCoordinates)[] = [];\n\n  if (options) {\n    const binary = options.gis.format === 'binary';\n    const firstPassData = {\n      pointPositionsCount: 0,\n      pointFeaturesCount: 0,\n      linePositionsCount: 0,\n      linePathsCount: 0,\n      lineFeaturesCount: 0,\n      polygonPositionsCount: 0,\n      polygonObjectsCount: 0,\n      polygonRingsCount: 0,\n      polygonFeaturesCount: 0\n    };\n\n    if (arrayBuffer.byteLength > 0) {\n      const tile = binary\n        ? new BinaryVectorTile(new Protobuf(arrayBuffer))\n        : new VectorTile(new Protobuf(arrayBuffer));\n      const loaderOptions = options.mvt;\n\n      const selectedLayers = Array.isArray(loaderOptions.layers)\n        ? loaderOptions.layers\n        : Object.keys(tile.layers);\n\n      selectedLayers.forEach((layerName: string) => {\n        const vectorTileLayer = tile.layers[layerName];\n        const featureOptions = {...loaderOptions, layerName};\n\n        if (!vectorTileLayer) {\n          return;\n        }\n\n        for (let i = 0; i < vectorTileLayer.length; i++) {\n          const vectorTileFeature = vectorTileLayer.feature(i, firstPassData);\n\n          const decodedFeature = binary\n            ? getDecodedFeatureBinary(vectorTileFeature as VectorTileFeatureBinary, featureOptions)\n            : getDecodedFeature(vectorTileFeature as VectorTileFeatureMapBox, featureOptions);\n          features.push(decodedFeature);\n        }\n      });\n    }\n\n    if (binary) {\n      const data = featuresToBinary(features as MvtBinaryCoordinates[], firstPassData);\n      // Add the original byteLength (as a reasonable approximation of the size of the binary data)\n      // TODO decide where to store extra fields like byteLength (header etc) and document\n      // @ts-ignore\n      data.byteLength = arrayBuffer.byteLength;\n      return data;\n    }\n  }\n  return features;\n}\n\n/**\n * @param options\n * @returns options\n */\nfunction normalizeOptions(options: LoaderOptions | undefined) {\n  if (options) {\n    options = {\n      ...options,\n      mvt: options.mvt || {},\n      gis: options.gis || {}\n    };\n\n    // Validate\n    const wgs84Coordinates = options.coordinates === 'wgs84';\n    const {tileIndex} = options;\n    const hasTileIndex =\n      tileIndex &&\n      Number.isFinite(tileIndex.x) &&\n      Number.isFinite(tileIndex.y) &&\n      Number.isFinite(tileIndex.z);\n\n    if (wgs84Coordinates && !hasTileIndex) {\n      throw new Error(\n        'MVT Loader: WGS84 coordinates need tileIndex property. Check documentation.'\n      );\n    }\n  }\n  return options;\n}\n\n/**\n * @param feature\n * @param options\n * @returns decoded feature\n */\nfunction getDecodedFeature(\n  feature: VectorTileFeatureMapBox,\n  options: MvtOptions\n): MvtMapboxCoordinates {\n  const decodedFeature = feature.toGeoJSON(\n    options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinates\n  );\n\n  // Add layer name to GeoJSON properties\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = options.layerName;\n  }\n\n  return decodedFeature;\n}\n\n/**\n * @param feature\n * @param options\n * @returns decoded binary feature\n */\nfunction getDecodedFeatureBinary(\n  feature: VectorTileFeatureBinary,\n  options: MvtOptions\n): MvtBinaryCoordinates {\n  const decodedFeature = feature.toBinaryCoordinates(\n    options.coordinates === 'wgs84' ? options.tileIndex : transformToLocalCoordinatesBinary\n  );\n\n  // Add layer name to GeoJSON properties\n  if (options.layerProperty) {\n    decodedFeature.properties[options.layerProperty] = options.layerName;\n  }\n\n  return decodedFeature;\n}\n\n/**\n * @param line\n * @param feature\n */\nfunction transformToLocalCoordinates(line: number[], feature: {extent: any}): void {\n  // This function transforms local coordinates in a\n  // [0 - bufferSize, this.extent + bufferSize] range to a\n  // [0 - (bufferSize / this.extent), 1 + (bufferSize / this.extent)] range.\n  // The resulting extent would be 1.\n  const {extent} = feature;\n  for (let i = 0; i < line.length; i++) {\n    const p = line[i];\n    p[0] /= extent;\n    p[1] /= extent;\n  }\n}\n\nfunction transformToLocalCoordinatesBinary(data: number[], feature: {extent: any}) {\n  // For the binary code path, the feature data is just\n  // one big flat array, so we just divide each value\n  const {extent} = feature;\n  for (let i = 0, il = data.length; i < il; ++i) {\n    data[i] /= extent;\n  }\n}\n"],"file":"parse-mvt.js"}