import type { TypedArray } from '../types';
export type { GeoJSON, Feature, Geometry, Position, GeoJsonProperties } from 'geojson';
export type { Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon } from 'geojson';
export declare type BinaryAttribute = {
    value: TypedArray;
    size: number;
};
export declare type BinaryGeometryType = 'Point' | 'LineString' | 'Polygon';
declare type NumericProps = {
    [key: string]: BinaryAttribute;
};
declare type Properties = object[];
/**
 * Represent a single Geometry, similar to a GeoJSON Geometry
 */
export declare type BinaryGeometry = BinaryPointGeometry | BinaryLineGeometry | BinaryPolygonGeometry;
export declare type BinaryPointGeometry = {
    type: 'Point';
    positions: BinaryAttribute;
};
export declare type BinaryLineGeometry = {
    type: 'LineString';
    positions: BinaryAttribute;
    pathIndices: BinaryAttribute;
};
export declare type BinaryPolygonGeometry = {
    type: 'Polygon';
    positions: BinaryAttribute;
    polygonIndices: BinaryAttribute;
    primitivePolygonIndices: BinaryAttribute;
};
export declare type BinaryProperties = {
    featureIds: BinaryAttribute;
    globalFeatureIds: BinaryAttribute;
    numericProps: NumericProps;
    properties: Properties;
    fields?: Properties;
};
export declare type BinaryPointFeatures = BinaryPointGeometry & BinaryProperties;
export declare type BinaryLineFeatures = BinaryLineGeometry & BinaryProperties;
export declare type BinaryPolygonFeatures = BinaryPolygonGeometry & BinaryProperties;
/**
 * Represent a collection of Features, similar to a GeoJSON FeatureCollection
 */
export declare type BinaryFeatures = {
    points?: BinaryPointFeatures;
    lines?: BinaryLineFeatures;
    polygons?: BinaryPolygonFeatures;
};
//# sourceMappingURL=gis.d.ts.map